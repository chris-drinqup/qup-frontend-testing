<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP - Order Here</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #667eea;
            --primary-dark: #4c63d2;
            --secondary: #764ba2;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --bg-primary: #0f0f23;
            --bg-secondary: #1a1a3e;
            --bg-card: #262654;
            --text-primary: #ffffff;
            --text-secondary: #a5a5c9;
            --border: #3a3a6b;
            --shadow: rgba(0, 0, 0, 0.4);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow-x: hidden;
        }

        .container {
            width: 100%;
            max-width: 500px;
            padding: 20px;
        }

        .card {
            background: var(--bg-card);
            border-radius: 20px;
            padding: 40px;
            border: 1px solid var(--border);
            backdrop-filter: blur(10px);
            box-shadow: 0 15px 40px var(--shadow);
            text-align: center;
            position: relative;
            z-index: 10;
        }

        .logo-header {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 10px;
        }

        .company-logo {
            height: 50px;
            width: auto;
            border-radius: 8px;
            object-fit: contain;
        }

        .logo {
            font-size: 3rem;
            font-weight: 800;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .subtitle {
            color: var(--text-secondary);
            margin-bottom: 40px;
            font-size: 1.1rem;
        }

        .connection-status {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 30px;
        }

        .connection-status.connected {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .connection-status.disconnected {
            background: rgba(239, 68, 68, 0.2);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .connection-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .form-group {
            margin-bottom: 25px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .form-control {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid var(--border);
            border-radius: 12px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            background: var(--bg-card);
        }

        .btn {
            width: 100%;
            padding: 16px 24px;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1.1rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .btn:hover::before {
            width: 300px;
            height: 300px;
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn-success {
            background: linear-gradient(45deg, var(--success), #059669);
            color: white;
        }

        .btn-danger {
            background: linear-gradient(45deg, var(--danger), #dc2626);
            color: white;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn:disabled:hover::before {
            width: 0;
            height: 0;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-left: 10px;
        }

        .order-status {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 15px;
            padding: 25px;
            margin: 20px 0;
            text-align: left;
        }

        .order-status h3 {
            color: var(--primary);
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .status-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid var(--border);
        }

        .status-item:last-child {
            border-bottom: none;
        }

        .status-label {
            color: var(--text-secondary);
            font-weight: 500;
        }

        .status-value {
            color: var(--text-primary);
            font-weight: 600;
        }

        .pickup-code {
            background: linear-gradient(45deg, var(--success), #059669);
            color: white;
            padding: 20px;
            border-radius: 15px;
            font-size: 2rem;
            font-weight: 800;
            letter-spacing: 2px;
            margin: 20px 0;
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.4);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 15;
        }

        .pickup-code:hover {
            transform: scale(1.05);
            box-shadow: 0 12px 35px rgba(16, 185, 129, 0.6);
        }

        .screen-flash {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: rgba(16, 185, 129, 0.9);
            z-index: 9999;
            opacity: 0;
            pointer-events: none;
            animation: flashEffect 0.8s ease-in-out;
        }

        @keyframes flashEffect {
            0% { opacity: 0; }
            50% { opacity: 1; }
            100% { opacity: 0; }
        }

        .countdown {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--warning);
            margin: 10px 0;
        }

        .alert {
            padding: 15px 20px;
            border-radius: 12px;
            margin: 15px 0;
            font-weight: 600;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.15);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.15);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .alert-info {
            background: rgba(59, 130, 246, 0.15);
            color: var(--info);
            border: 1px solid var(--info);
        }

        .user-info {
            background: var(--bg-secondary);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-email {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .logout-btn {
            background: transparent;
            border: 1px solid var(--border);
            color: var(--text-secondary);
            padding: 6px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
        }

        .logout-btn:hover {
            border-color: var(--danger);
            color: var(--danger);
        }

        .hidden {
            display: none;
        }

        /* Logo Rain Animation System */
        .logo-rain {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none;
            z-index: 5;
            overflow: hidden;
        }

        .rain-logo {
            position: absolute;
            width: 30px;
            height: 30px;
            opacity: 0.6;
            animation: rainFall linear infinite;
            pointer-events: none;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            transform: rotate(15deg);
            z-index: 25;
        }

        @keyframes rainFall {
            from {
                top: -40px;
                transform: rotate(0deg) scale(1);
            }
            50% {
                transform: rotate(180deg) scale(1.2);
            }
            to {
                top: 100vh;
                transform: rotate(360deg) scale(0.8);
            }
        }

        .rain-logo:nth-child(odd) {
            animation-direction: reverse;
        }

        .rain-logo:nth-child(3n) {
            animation-duration: 4s;
        }

        .rain-logo:nth-child(3n+1) {
            animation-duration: 6s;
        }

        .rain-logo:nth-child(3n+2) {
            animation-duration: 5s;
        }

        /* Anti-screenshot measures - Updated to use logo images */
        .pickup-section-protected {
            position: relative;
        }

        .pickup-section-protected::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><circle cx="10" cy="10" r="2" fill="white" opacity="0.1"/></svg>') repeat;
            background-size: 20px 20px;
            animation: backgroundShimmer 2s linear infinite;
            pointer-events: none;
            z-index: 1;
            display: none; /* Hide default pattern - we'll use logo overlay instead */
        }

        /* New logo overlay system for anti-screenshot */
        .logo-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            pointer-events: none;
            z-index: 20;
            overflow: hidden;
        }

        .overlay-logo {
            position: absolute;
            width: 12px;
            height: 12px;
            opacity: 0.15; /* Twice as dark as the original 0.3 opacity */
            animation: overlayFloat linear infinite;
            pointer-events: none;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            filter: brightness(0.5); /* Additional darkening */
        }

        @keyframes overlayFloat {
            0% {
                transform: translateX(-20px) translateY(-20px) rotate(0deg) scale(1);
            }
            25% {
                transform: translateX(20px) translateY(-10px) rotate(90deg) scale(1.1);
            }
            50% {
                transform: translateX(10px) translateY(20px) rotate(180deg) scale(0.9);
            }
            75% {
                transform: translateX(-10px) translateY(10px) rotate(270deg) scale(1.05);
            }
            100% {
                transform: translateX(-20px) translateY(-20px) rotate(360deg) scale(1);
            }
        }

        .overlay-logo:nth-child(2n) {
            animation-duration: 3s;
            animation-direction: reverse;
        }

        .overlay-logo:nth-child(3n) {
            animation-duration: 4s;
            animation-delay: -1s;
        }

        .overlay-logo:nth-child(4n) {
            animation-duration: 5s;
            animation-delay: -2s;
        }

        @keyframes backgroundShimmer {
            0% { background-position: 0 0; }
            100% { background-position: 20px 20px; }
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease-in-out;
        }

        @media (max-width: 480px) {
            .container {
                padding: 15px;
            }

            .card {
                padding: 30px 25px;
            }

            .logo {
                font-size: 2.5rem;
            }

            .company-logo {
                height: 40px;
            }
        }
    </style>
</head>
<body>
    <!-- Logo Rain Container -->
    <div id="logoRain" class="logo-rain"></div>

    <div class="container">
        <!-- Login Screen -->
        <div id="loginScreen" class="card">
            <div class="logo-header">
                <img id="loginLogo" class="company-logo" src="" alt="Logo" style="display: none;">
                <div class="logo">QUP</div>
            </div>
            <div class="subtitle">Sign in to place your order</div>

            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" class="form-control" placeholder="Enter your email">
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" class="form-control" placeholder="Enter your password">
            </div>

            <button class="btn btn-primary" onclick="handleLogin()">
                <span id="loginText">Sign In</span>
                <div id="loginLoading" class="loading hidden"></div>
            </button>

            <div id="loginError" class="alert alert-error hidden">
                Login failed. Please check your credentials.
            </div>

            <div style="margin-top: 20px; font-size: 0.9rem; color: var(--text-secondary);">
                Need an account? Contact your administrator.<br>
                <button type="button" style="background: none; border: none; color: var(--primary); cursor: pointer; text-decoration: underline; margin-top: 10px;" onclick="skipAuth()">
                    Skip Login (Test Mode)
                </button>
            </div>
        </div>

        <!-- Main App Screen -->
        <div id="appScreen" class="card hidden">
            <div class="logo-header">
                <img id="appLogo" class="company-logo" src="" alt="Logo" style="display: none;">
                <div class="logo">QUP</div>
            </div>
            <div class="subtitle">Place Your Order</div>

            <div class="user-info">
                <span id="userEmail" class="user-email"></span>
                <button class="logout-btn" onclick="logout()">Sign Out</button>
            </div>

            <div class="connection-status" id="connectionStatus">
                <div class="connection-dot"></div>
                <span>Connecting...</span>
            </div>

            <!-- Order Form -->
            <div id="orderForm">
                <div class="form-group">
                    <label for="customerName">Your Name:</label>
                    <input type="text" id="customerName" class="form-control"
                           placeholder="Enter your name (e.g., John Smith)">
                </div>

                <div class="form-group">
                    <label for="orderDescription">What would you like to order?</label>
                    <input type="text" id="orderDescription" class="form-control"
                           placeholder="e.g., Large coffee with milk, no sugar">
                </div>

                <button class="btn btn-primary" onclick="placeOrder()">
                    <span id="orderButtonText">Place Order</span>
                    <div id="orderLoading" class="loading hidden"></div>
                </button>
            </div>

            <!-- Order Status -->
            <div id="orderStatus" class="order-status hidden">
                <h3>Your Order</h3>
                <div class="status-item">
                    <span class="status-label">Customer:</span>
                    <span class="status-value" id="orderCustomerName">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Order:</span>
                    <span class="status-value" id="orderDetails">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Status:</span>
                    <span class="status-value" id="orderCurrentStatus">-</span>
                </div>
                <div class="status-item">
                    <span class="status-label">Est. Wait:</span>
                    <span class="status-value countdown" id="orderWaitTime">-</span>
                </div>
            </div>

            <!-- Pickup Code Display with Logo Protection -->
            <div id="pickupSection" class="pickup-section-protected hidden">
                <div class="alert alert-success">
                    Your order is ready for PiQUP!
                </div>
                <div style="position: relative;">
                    <div class="pickup-code" id="pickupCode" onclick="flashScreen()">----</div>
                    <div id="logoOverlay" class="logo-overlay"></div>
                </div>
                <div style="color: var(--text-secondary); margin-bottom: 20px;">
                    Show this code to the barista
                </div>
            </div>

            <!-- Order Complete -->
            <div id="completeSection" class="hidden">
                <div class="alert alert-success">
                    Order completed! Thank you for using QUP.
                </div>
                <button class="btn btn-primary" onclick="startNewOrder()">
                    Place Another Order
                </button>
            </div>

            <div id="alerts"></div>
        </div>
    </div>

    <script>
        // Configuration
        const SUPABASE_URL = 'https://eorhgophbjjbiguvkygo.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVvcmhnb3BoYmpqYmlndXZreWdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MjMyMjUsImV4cCI6MjA2NDM5OTIyNX0.fV_6TFXfjDVusTeknF_LAGjxw7BfTZtoQ0helbm5mwo';
        const API_BASE = 'https://qupcore-supercode-692478335867.us-central1.run.app';

        // Initialize Supabase
        let supabase = null;

        // Global state
        let socket = null;
        let currentUser = null;
        let currentOrder = null;
        let developerKey = null;
        let waitTimeInterval = null;
        let estimatedCompletionTime = null;
        let orderStatusInterval = null;
        let logoRainInterval = null;
        let logoOverlayInterval = null; // New: for logo overlay protection
        let currentLogo = null;
        let logoSettings = null;

        function initializeSupabase() {
            try {
                if (!SUPABASE_URL || SUPABASE_URL === 'YOUR_SUPABASE_URL' ||
                    !SUPABASE_ANON_KEY || SUPABASE_ANON_KEY === 'YOUR_SUPABASE_ANON_KEY') {
                    console.error('Supabase configuration missing. Please update SUPABASE_URL and SUPABASE_ANON_KEY');
                    showAlert('Supabase configuration missing. Please contact administrator.', 'error');
                    return false;
                }

                supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                console.log('Supabase client initialized');
                return true;
            } catch (error) {
                console.error('Supabase initialization failed:', error);
                showAlert('Failed to initialize authentication system.', 'error');
                return false;
            }
        }

        // Initialize app
        async function init() {
            console.log('QUP Client initializing...');

            // Initialize Supabase first
            if (!initializeSupabase()) {
                showLogin();
                return;
            }

            // Load logo and settings
            await loadCompanyAssets();

            // Check if user is already logged in
            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (user) {
                    showApp(user);
                } else {
                    showLogin();
                }
            } catch (error) {
                console.error('Failed to check user session:', error);
                showLogin();
            }
        }

        // Load company logo and settings
        async function loadCompanyAssets() {
            try {
                // Load current logo
                const { data: logoData, error: logoError } = await supabase
                    .from('company_logos')
                    .select('*')
                    .eq('is_active', true)
                    .order('uploaded_at', { ascending: false })
                    .limit(1);

                if (!logoError && logoData && logoData.length > 0) {
                    currentLogo = logoData[0];
                    updateLogoDisplays();
                }

                // Load logo settings
                const { data: settingsData, error: settingsError } = await supabase
                    .from('logo_settings')
                    .select('*')
                    .limit(1);

                if (!settingsError && settingsData && settingsData.length > 0) {
                    logoSettings = settingsData[0];
                } else {
                    // Default settings
                    logoSettings = {
                        show_client: true,
                        client_size: 50,
                        enable_rain: true,
                        rain_intensity: 3,
                        rain_opacity: 30
                    };
                }

                console.log('Company assets loaded:', { currentLogo: !!currentLogo, logoSettings });

            } catch (error) {
                console.error('Failed to load company assets:', error);
                // Use defaults
                logoSettings = {
                    show_client: true,
                    client_size: 50,
                    enable_rain: true,
                    rain_intensity: 3,
                    rain_opacity: 30
                };
            }
        }

        function updateLogoDisplays() {
            console.log('Updating client logo displays...', { currentLogo, logoSettings });
            if (!currentLogo) {
                console.log('No current logo - using default URL');
                currentLogo = {
                    logo_url: 'https://eorhgophbjjbiguvkygo.supabase.co/storage/v1/object/public/company-assets/logos/logo-1749419576950.png'
                };
            }
            if (!logoSettings) {
                logoSettings = { show_client: true, client_size: 50, enable_rain: true, rain_intensity: 3, rain_opacity: 30 };
            }
            if (!logoSettings.show_client) {
                console.log('Logo settings prevent client display');
                return;
            }
            const loginLogo = document.getElementById('loginLogo');
            const appLogo = document.getElementById('appLogo');
            if (loginLogo && appLogo) {
                const logoUrl = currentLogo.logo_url;
                const logoSize = logoSettings.client_size || 50;
                console.log('Setting client logos:', logoUrl);
                loginLogo.src = logoUrl;
                loginLogo.style.height = logoSize + 'px';
                loginLogo.style.display = 'block';
                appLogo.src = logoUrl;
                appLogo.style.height = logoSize + 'px';
                appLogo.style.display = 'block';
                console.log('Logo displays updated for client');
            } else {
                console.error('Logo elements not found');
            }
        }

        // Logo Rain System
        function startLogoRain() {
            console.log('Starting logo rain...', { currentLogo, logoSettings });
            if (!currentLogo) {
                console.log('No current logo - using default URL for rain');
                currentLogo = {
                    logo_url: 'https://eorhgophbjjbiguvkygo.supabase.co/storage/v1/object/public/company-assets/logos/logo-1749419576950.png'
                };
            }
            if (!logoSettings) {
                logoSettings = { enable_rain: true, rain_intensity: 3, rain_opacity: 30 };
            }
            if (!logoSettings.enable_rain) {
                console.log('Logo rain disabled');
                return;
            }

            const rainContainer = document.getElementById('logoRain');
            if (!rainContainer) {
                console.error('Rain container not found');
                return;
            }

            const rainIntensity = logoSettings.rain_intensity || 3;
            const rainOpacity = (logoSettings.rain_opacity || 30) / 100;

            console.log('Rain settings:', { rainIntensity, rainOpacity });

            logoRainInterval = setInterval(() => {
                createRainLogo(rainContainer, rainOpacity);
            }, 1000 / rainIntensity);

            console.log('Logo rain started');
        }

        function createRainLogo(container, opacity) {
            if (!currentLogo) return;

            const logo = document.createElement('img');
            logo.src = currentLogo.logo_url;
            logo.className = 'rain-logo';
            logo.style.left = Math.random() * window.innerWidth + 'px';
            logo.style.opacity = opacity;
            logo.style.animationDuration = (Math.random() * 3 + 3) + 's';
            logo.style.animationDelay = Math.random() * 2 + 's';

            // Prevent drag and context menu
            logo.draggable = false;
            logo.oncontextmenu = () => false;
            logo.onselectstart = () => false;
            logo.ondragstart = () => false;

            container.appendChild(logo);

            // Remove after animation
            setTimeout(() => {
                if (logo.parentNode) {
                    logo.remove();
                }
            }, 8000);
        }

        function stopLogoRain() {
            if (logoRainInterval) {
                clearInterval(logoRainInterval);
                logoRainInterval = null;

                // Clear existing rain logos
                const rainContainer = document.getElementById('logoRain');
                rainContainer.innerHTML = '';

                console.log('Logo rain stopped');
            }
        }

        // NEW: Logo Overlay Protection System
        function startLogoOverlay() {
            console.log('Starting logo overlay protection...');
            if (!currentLogo) {
                console.log('No current logo - using default URL for overlay');
                currentLogo = {
                    logo_url: 'https://eorhgophbjjbiguvkygo.supabase.co/storage/v1/object/public/company-assets/logos/logo-1749419576950.png'
                };
            }

            const overlayContainer = document.getElementById('logoOverlay');
            if (!overlayContainer) {
                console.error('Overlay container not found');
                return;
            }

            // Create multiple floating logos over the pickup code
            for (let i = 0; i < 8; i++) {
                createOverlayLogo(overlayContainer, i);
            }

            // Continuously add new logos to maintain coverage
            logoOverlayInterval = setInterval(() => {
                if (overlayContainer.children.length < 12) {
                    createOverlayLogo(overlayContainer, Math.floor(Math.random() * 100));
                }
            }, 2000);

            console.log('Logo overlay protection started');
        }

        function createOverlayLogo(container, index) {
            if (!currentLogo) return;

            const logo = document.createElement('img');
            logo.src = currentLogo.logo_url;
            logo.className = 'overlay-logo';
            
            // Random positioning within the overlay area
            logo.style.left = Math.random() * 90 + 5 + '%';
            logo.style.top = Math.random() * 90 + 5 + '%';
            
            // Vary animation duration and delay for more randomness
            logo.style.animationDuration = (2 + Math.random() * 3) + 's';
            logo.style.animationDelay = (Math.random() * 2) + 's';

            // Prevent drag and context menu
            logo.draggable = false;
            logo.oncontextmenu = () => false;
            logo.onselectstart = () => false;
            logo.ondragstart = () => false;

            container.appendChild(logo);

            // Remove after some time and replace
            setTimeout(() => {
                if (logo.parentNode) {
                    logo.remove();
                }
            }, 8000 + Math.random() * 4000);
        }

        function stopLogoOverlay() {
            if (logoOverlayInterval) {
                clearInterval(logoOverlayInterval);
                logoOverlayInterval = null;

                // Clear existing overlay logos
                const overlayContainer = document.getElementById('logoOverlay');
                if (overlayContainer) {
                    overlayContainer.innerHTML = '';
                }

                console.log('Logo overlay protection stopped');
            }
        }

        // Authentication functions
        async function handleLogin() {
            if (!supabase) {
                showAlert('Authentication system not ready. Please refresh the page.', 'error');
                return;
            }

            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();

            if (!email || !password) {
                showAlert('Please enter both email and password', 'error');
                return;
            }

            setLoading('login', true);
            hideElement('loginError');

            try {
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: email,
                    password: password
                });

                if (error) {
                    throw error;
                }

                console.log('Supabase login successful');
                showApp(data.user);

            } catch (error) {
                console.error('Login failed:', error);
                showElement('loginError');
                showAlert('Login failed: ' + error.message, 'error');
            } finally {
                setLoading('login', false);
            }
        }

        async function logout() {
            if (!supabase) return;

            try {
                await supabase.auth.signOut();
                console.log('Logged out');

                // Cleanup
                stopLogoRain();
                stopLogoOverlay(); // New cleanup
                if (socket) {
                    socket.disconnect();
                    socket = null;
                }
                if (waitTimeInterval) {
                    clearInterval(waitTimeInterval);
                    waitTimeInterval = null;
                }
                if (orderStatusInterval) {
                    clearInterval(orderStatusInterval);
                    orderStatusInterval = null;
                }

                currentUser = null;
                currentOrder = null;
                developerKey = null;

                showLogin();

            } catch (error) {
                console.error('Logout failed:', error);
            }
        }

        // App initialization
        async function showApp(user) {
            currentUser = user;

            hideElement('loginScreen');
            showElement('appScreen');
            document.getElementById('userEmail').textContent = user.email;

            // Pre-fill customer name from email
            const customerNameField = document.getElementById('customerName');
            if (customerNameField && user.email) {
                // Extract name from email (before @)
                const emailUsername = user.email.split('@')[0];
                // Convert underscores/dots to spaces and capitalize
                const suggestedName = emailUsername.replace(/[._]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                customerNameField.value = suggestedName;
            }

            // Get developer key for API access
            await getDeveloperKey();

            // Connect WebSocket
            connectWebSocket();

            console.log('App initialized for:', user.email);
        }

        function showLogin() {
            hideElement('appScreen');
            showElement('loginScreen');
            stopLogoRain();
            stopLogoOverlay(); // New cleanup

            // Clear form
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
        }

        // Get developer key for API access
        async function getDeveloperKey() {
            try {
                console.log('Getting developer key from:', API_BASE);

                const response = await fetch(`${API_BASE}/api/auth/developer/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        username: 'developer',
                        password: 'dev123'
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }

                const data = await response.json();

                if (data.developer_key) {
                    developerKey = data.developer_key;
                    console.log('Developer key obtained');
                } else {
                    throw new Error(data.error || 'No developer key in response');
                }
            } catch (error) {
                console.error('Developer key error:', error);
                showAlert('Failed to get API access. Please contact administrator.', 'error');
            }
        }

        // WebSocket connection
        function connectWebSocket() {
            try {
                console.log('Connecting to WebSocket at:', API_BASE);

                socket = io(API_BASE, {
                    transports: ['websocket', 'polling'],
                    timeout: 20000,
                    reconnection: true,
                    reconnectionDelay: 2000,
                    reconnectionAttempts: 5,
                    forceNew: true
                });

                socket.on('connect', () => {
                    updateConnectionStatus(true);
                    console.log('WebSocket connected to:', API_BASE);

                    // Subscribe to order updates for this user
                    if (currentOrder) {
                        socket.emit('subscribe', { orderId: currentOrder });
                        console.log('Subscribed to order updates for:', currentOrder);
                    }
                });

                socket.on('disconnect', () => {
                    updateConnectionStatus(false);
                    console.log('WebSocket disconnected');
                });

                socket.on('connect_error', (error) => {
                    console.error('WebSocket connection error:', error);
                    updateConnectionStatus(false);
                });

                socket.on('order_update', (data) => {
                    console.log('Order update received:', data);
                    handleOrderUpdate(data);
                });

                socket.on('subscribed_order_update', (data) => {
                    console.log('Subscribed order update:', data);
                    handleOrderUpdate(data);
                });

                socket.on('queue_update', (data) => {
                    console.log('Queue update received:', data);
                    // Check if our order status changed
                    if (currentOrder && data.queue) {
                        const myOrder = data.queue.find(order => order.id === currentOrder);
                        if (myOrder) {
                            handleMyOrderUpdate(myOrder);
                        }
                    }
                });

                socket.on('error', (error) => {
                    console.error('WebSocket error:', error);
                });

            } catch (error) {
                console.error('WebSocket connection failed:', error);
                updateConnectionStatus(false);
            }
        }

        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionStatus');
            if (connected) {
                status.className = 'connection-status connected';
                status.innerHTML = '<div class="connection-dot"></div><span>Connected</span>';
            } else {
                status.className = 'connection-status disconnected';
                status.innerHTML = '<div class="connection-dot"></div><span>Disconnected</span>';
            }
        }

        // Order management
        async function placeOrder() {
            const customerName = document.getElementById('customerName').value.trim();
            const description = document.getElementById('orderDescription').value.trim();

            if (!customerName) {
                showAlert('Please enter your name', 'error');
                return;
            }

            if (!description) {
                showAlert('Please enter your order description', 'error');
                return;
            }

            if (!developerKey) {
                showAlert('API not ready. Please try again.', 'error');
                return;
            }

            setLoading('order', true);

            try {
                const orderId = `${currentUser.email.replace('@', '_').replace('.', '_')}_${Date.now()}`;

                const response = await fetch(`${API_BASE}/api/v1/queue/add`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-API-Key': developerKey
                    },
                    body: JSON.stringify({
                        id: orderId,
                        payload: {
                            order: description,
                            customer_email: currentUser.email,
                            customer_name: customerName,
                            items: [{ name: description, quantity: 1 }]
                        },
                        user_id: currentUser.email,
                        priority: 500
                    })
                });

                const data = await response.json();

                if (response.ok) {
                    currentOrder = orderId;

                    // Subscribe to order updates
                    if (socket && socket.connected) {
                        socket.emit('subscribe', { orderId: orderId });
                        console.log('Subscribed to order updates for:', orderId);
                    }

                    // Emit order created event to notify baristas
                    if (socket && socket.connected) {
                        socket.emit('order_created', {
                            orderId: orderId,
                            orderData: {
                                id: orderId,
                                payload: {
                                    order: description,
                                    customer_email: currentUser.email,
                                    customer_name: customerName,
                                    items: [{ name: description, quantity: 1 }]
                                },
                                user_id: currentUser.email,
                                priority: 500
                            }
                        });
                        console.log('Notified baristas of new order');
                    }

                    // Show order status
                    showOrderStatus(customerName, description, data);
                    hideElement('orderForm');

                    // Start periodic order status checking
                    startOrderStatusPolling();

                    console.log('Order placed:', orderId);
                    showAlert('Order placed successfully!', 'success');

                } else {
                    throw new Error(data.error || 'Failed to place order');
                }

            } catch (error) {
                console.error('Order failed:', error);
                showAlert('Order failed: ' + error.message, 'error');
            } finally {
                setLoading('order', false);
            }
        }

        function showOrderStatus(customerName, description, orderData) {
            document.getElementById('orderCustomerName').textContent = customerName;
            document.getElementById('orderDetails').textContent = description;
            document.getElementById('orderCurrentStatus').textContent = 'Waiting in queue';

            // Calculate estimated completion time
            if (orderData.estimated_time) {
                estimatedCompletionTime = new Date(Date.now() + (orderData.estimated_time * 1000));
                startWaitTimeCountdown();
            }

            showElement('orderStatus');
        }

        function startWaitTimeCountdown() {
            if (waitTimeInterval) {
                clearInterval(waitTimeInterval);
            }

            waitTimeInterval = setInterval(() => {
                if (!estimatedCompletionTime) return;

                const now = new Date();
                const timeLeft = estimatedCompletionTime - now;

                if (timeLeft <= 0) {
                    document.getElementById('orderWaitTime').textContent = 'Any moment now...';
                    clearInterval(waitTimeInterval);
                    waitTimeInterval = null;
                } else {
                    const minutes = Math.floor(timeLeft / (1000 * 60));
                    const seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
                    document.getElementById('orderWaitTime').textContent = `${minutes}m ${seconds}s`;
                }
            }, 1000);
        }

        // NEW: Periodic order status polling
        function startOrderStatusPolling() {
            if (orderStatusInterval) {
                clearInterval(orderStatusInterval);
            }

            orderStatusInterval = setInterval(async () => {
                if (!currentOrder || !developerKey) return;

                try {
                    console.log('Polling order status...');
                    const response = await fetch(`${API_BASE}/api/v1/queue/list?admin=true`, {
                        headers: { 'X-API-Key': developerKey }
                    });

                    const data = await response.json();

                    if (response.ok && data.queue) {
                        const myOrder = data.queue.find(order => order.id === currentOrder);
                        if (myOrder) {
                            console.log('Found my order in polling:', myOrder);
                            handleMyOrderUpdate(myOrder);
                        } else {
                            // Order not found in queue - completed!
                            console.log('Order not found in queue - order completed');

                            // Stop polling immediately
                            clearInterval(orderStatusInterval);
                            orderStatusInterval = null;

                            // Show completion and auto-return to order form
                            showOrderComplete();
                        }
                    }
                } catch (error) {
                    console.error('Failed to poll order status:', error);
                }
            }, 3000); // Poll every 3 seconds
        }

        function handleOrderUpdate(data) {
            if (!currentOrder || data.orderId !== currentOrder) return;

            console.log('Handling order update for my order:', data.action);

            switch (data.action) {
                case 'finalized':
                case 'pickup_ready':
                    // Refresh order status to get PiQUP code (only if not already showing)
                    if (document.getElementById('pickupSection').classList.contains('hidden')) {
                        checkForPickupCode();
                    }
                    break;

                case 'completed':
                    showOrderComplete();
                    break;

                case 'cancelled':
                    showAlert('Your order has been cancelled', 'error');
                    startNewOrder();
                    break;
            }
        }

        function handleMyOrderUpdate(orderData) {
            console.log('My order data updated:', orderData);

            if (orderData.finalized && orderData.pickup_code && orderData.pickup_code !== 'PENDING') {
                // Only show pickup code if not already showing it
                if (document.getElementById('pickupSection').classList.contains('hidden')) {
                    showPickupCode(orderData.pickup_code);
                }
            } else if (orderData.status === 'completed') {
                showOrderComplete();
            } else if (orderData.cancelled) {
                showAlert('Your order has been cancelled', 'error');
                startNewOrder();
            } else {
                // Update position and wait time if still waiting
                if (!orderData.finalized) {
                    updateOrderPosition(orderData);
                }
            }
        }

        function updateOrderPosition(orderData) {
            // Position removed - only update estimated completion time
            if (orderData.estimated_completion) {
                estimatedCompletionTime = new Date(orderData.estimated_completion);
                if (!waitTimeInterval) {
                    startWaitTimeCountdown();
                }
            }
        }

        async function checkForPickupCode() {
            try {
                console.log('Checking for pickup code...');

                const response = await fetch(`${API_BASE}/api/v1/queue/list?admin=true`, {
                    headers: { 'X-API-Key': developerKey }
                });

                const data = await response.json();

                if (response.ok && data.queue) {
                    const myOrder = data.queue.find(order => order.id === currentOrder);
                    if (myOrder) {
                        console.log('Found my order:', myOrder);
                        if (myOrder.finalized && myOrder.pickup_code && myOrder.pickup_code !== 'PENDING') {
                            showPickupCode(myOrder.pickup_code);
                        } else if (myOrder.finalized) {
                            // Order is finalized but no pickup code yet, wait a bit and check again
                            setTimeout(checkForPickupCode, 1000);
                        }
                    }
                } else {
                    console.error('Failed to get order details:', data.error);
                }
            } catch (error) {
                console.error('Failed to check pickup code:', error);
                // Retry after a short delay
                setTimeout(checkForPickupCode, 2000);
            }
        }

        function showPickupCode(code) {
            document.getElementById('orderCurrentStatus').textContent = 'Ready for PiQUP';
            document.getElementById('pickupCode').textContent = code;

            hideElement('orderStatus');
            showElement('pickupSection');

            // Start logo rain when PiQUP code is shown
            startLogoRain();
            
            // NEW: Start logo overlay protection
            startLogoOverlay();

            // Stop timers but KEEP polling to detect completion
            if (waitTimeInterval) {
                clearInterval(waitTimeInterval);
                waitTimeInterval = null;
            }

            // Make sure we're still polling for completion
            if (!orderStatusInterval && currentOrder) {
                startOrderStatusPolling();
            }

            console.log('PiQUP code received:', code);
        }

        function showOrderComplete() {
            hideElement('orderStatus');
            hideElement('pickupSection');

            // Stop logo rain and overlay
            stopLogoRain();
            stopLogoOverlay(); // NEW

            // Stop all intervals
            if (waitTimeInterval) {
                clearInterval(waitTimeInterval);
                waitTimeInterval = null;
            }
            if (orderStatusInterval) {
                clearInterval(orderStatusInterval);
                orderStatusInterval = null;
            }

            console.log('Order completed');
            showAlert('Order completed! Thank you for using QUP.', 'success');

            // Go directly back to order form after 1 second
            setTimeout(() => {
                startNewOrder();
            }, 1000);
        }

        function startNewOrder() {
            // Reset state
            currentOrder = null;
            estimatedCompletionTime = null;

            // Stop logo rain and overlay
            stopLogoRain();
            stopLogoOverlay(); // NEW

            // Stop all intervals
            if (waitTimeInterval) {
                clearInterval(waitTimeInterval);
                waitTimeInterval = null;
            }
            if (orderStatusInterval) {
                clearInterval(orderStatusInterval);
                orderStatusInterval = null;
            }

            // Reset UI
            document.getElementById('orderDescription').value = '';
            // Keep customer name for convenience
            hideElement('orderStatus');
            hideElement('pickupSection');
            hideElement('completeSection');
            showElement('orderForm');

            console.log('Ready for new order');
        }

        // Utility functions
        function showElement(id) {
            document.getElementById(id).classList.remove('hidden');
        }

        function hideElement(id) {
            document.getElementById(id).classList.add('hidden');
        }

        function setLoading(type, loading) {
            if (type === 'login') {
                const text = document.getElementById('loginText');
                const spinner = document.getElementById('loginLoading');

                if (loading) {
                    text.style.display = 'none';
                    spinner.classList.remove('hidden');
                } else {
                    text.style.display = 'inline';
                    spinner.classList.add('hidden');
                }
            } else if (type === 'order') {
                const text = document.getElementById('orderButtonText');
                const spinner = document.getElementById('orderLoading');
                const button = text.parentElement;

                if (loading) {
                    text.style.display = 'none';
                    spinner.classList.remove('hidden');
                    button.disabled = true;
                } else {
                    text.style.display = 'inline';
                    spinner.classList.add('hidden');
                    button.disabled = false;
                }
            }
        }

        function showAlert(message, type = 'info') {
            const alertsContainer = document.getElementById('alerts');

            // Clear existing alerts of the same message to prevent duplicates
            const existingAlerts = alertsContainer.querySelectorAll('.alert');
            existingAlerts.forEach(alert => {
                if (alert.textContent === message) {
                    alert.remove();
                }
            });

            const alert = document.createElement('div');
            alert.className = `alert alert-${type} fade-in`;
            alert.textContent = message;

            alertsContainer.appendChild(alert);

            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        // Handle Enter key in form fields
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('email').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    document.getElementById('password').focus();
                }
            });

            document.getElementById('password').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    handleLogin();
                }
            });

            document.getElementById('customerName').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    document.getElementById('orderDescription').focus();
                }
            });

            document.getElementById('orderDescription').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    placeOrder();
                }
            });
        });

        // Flash screen effect when clicking PiQUP code
        function flashScreen() {
            // Create flash overlay
            const flashDiv = document.createElement('div');
            flashDiv.className = 'screen-flash';
            document.body.appendChild(flashDiv);

            // Remove after animation completes
            setTimeout(() => {
                if (document.body.contains(flashDiv)) {
                    document.body.removeChild(flashDiv);
                }
            }, 800);

            console.log('PiQUP code flashed!');
        }

        // Test mode function (bypasses Supabase)
        function skipAuth() {
            console.log('Entering test mode (bypassing Supabase auth)');
            const testUser = {
                email: 'test@example.com',
                id: 'test-user-' + Date.now()
            };
            showApp(testUser);
        }

        // Initialize the app
        init();
    </script>
</body>
