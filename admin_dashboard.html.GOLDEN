<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP Admin Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #667eea;
            --primary-dark: #4c63d2;
            --secondary: #764ba2;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --bg-primary: #0f0f23;
            --bg-secondary: #1a1a3e;
            --bg-card: #262654;
            --text-primary: #ffffff;
            --text-secondary: #a5a5c9;
            --border: #3a3a6b;
            --shadow: rgba(0, 0, 0, 0.4);
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            backdrop-filter: blur(2px);
        }

        .login-form {
            background: var(--bg-card);
            backdrop-filter: blur(20px);
            padding: 50px;
            border-radius: 25px;
            width: 450px;
            box-shadow: 0 15px 40px var(--shadow);
            text-align: center;
            border: 1px solid var(--border);
            position: relative;
            transform: translateY(0);
            transition: transform 0.3s ease;
        }

        .login-form:hover {
            transform: translateY(-5px);
            box-shadow: 0 25px 60px var(--shadow);
        }

        .login-form h2 {
            color: var(--text-primary);
            margin-bottom: 35px;
            font-size: 32px;
            font-weight: 800;
            letter-spacing: -0.5px;
        }

        .form-group {
            margin-bottom: 25px;
            text-align: left;
        }

        .form-group label {
            display: block;
            margin-bottom: 10px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 16px 20px;
            border: 2px solid var(--border);
            border-radius: 15px;
            font-size: 16px;
            background: var(--bg-secondary);
            color: var(--text-primary);
            transition: all 0.3s ease;
            font-family: inherit;
        }

        .form-group textarea {
            min-height: 120px;
            resize: vertical;
        }

        .form-group input:focus, .form-group textarea:focus, .form-group select:focus {
            outline: none;
            border-color: var(--primary);
            background: var(--bg-card);
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
            border: none;
            padding: 16px 32px;
            border-radius: 15px;
            cursor: pointer;
            font-weight: 700;
            font-size: 16px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .btn-success {
            background: linear-gradient(45deg, var(--success), #059669);
        }

        .btn-danger {
            background: linear-gradient(45deg, var(--danger), #dc2626);
        }

        .btn-warning {
            background: linear-gradient(45deg, var(--warning), #d97706);
        }

        .btn-info {
            background: linear-gradient(45deg, var(--info), #1d4ed8);
        }

        .dashboard-container {
            display: none;
            margin: 20px;
            min-height: calc(100vh - 40px);
        }

        .container {
            background: var(--bg-card);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            padding: 40px;
            box-shadow: 0 15px 40px var(--shadow);
            max-width: 1400px;
            margin: 0 auto;
            border: 1px solid var(--border);
            position: relative;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid var(--border);
            background: var(--bg-secondary);
            padding: 25px;
            border-radius: 20px;
            margin: -10px -10px 30px -10px;
        }

        h2 {
            color: var(--text-primary);
            margin: 0;
            font-size: 32px;
            font-weight: 800;
            letter-spacing: -0.5px;
        }

        .nav-tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .nav-tab {
            background: var(--bg-secondary);
            color: var(--text-secondary);
            border: 2px solid var(--border);
            padding: 12px 24px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .nav-tab.active {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
            border-color: var(--primary);
        }

        .nav-tab:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .section {
            background: var(--bg-secondary);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            border: 1px solid var(--border);
        }

        .section h3 {
            color: var(--primary);
            margin-bottom: 20px;
            font-size: 24px;
            font-weight: 700;
        }

        .grid {
            display: grid;
            gap: 20px;
            margin-bottom: 20px;
        }

        .grid-2 {
            grid-template-columns: 1fr 1fr;
        }

        .grid-3 {
            grid-template-columns: 1fr 1fr 1fr;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 10px 30px var(--shadow);
            background: var(--bg-card);
        }

        .data-table th {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
            text-align: left;
            font-size: 14px;
            padding: 15px 20px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table td {
            padding: 15px 20px;
            text-align: left;
            background-color: var(--bg-secondary);
            font-size: 14px;
            border-bottom: 1px solid var(--border);
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .data-table tr:hover td {
            background-color: var(--bg-card);
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);
        }

        .code-block {
            background: var(--bg-primary);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 20px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            white-space: pre-wrap;
            word-break: break-all;
            color: var(--success);
        }

        .alert {
            padding: 15px 20px;
            border-radius: 12px;
            margin: 15px 0;
            font-weight: 600;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.15);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.15);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .alert-info {
            background: rgba(59, 130, 246, 0.15);
            color: var(--info);
            border: 1px solid var(--info);
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            margin-left: 10px;
        }

        .user-info {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .logout-btn {
            background: linear-gradient(45deg, var(--danger), #dc2626);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 700;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
        }

        .logout-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(239, 68, 68, 0.4);
        }

        .hidden {
            display: none;
        }

        .error-message {
            background: rgba(239, 68, 68, 0.15);
            color: var(--danger);
            padding: 18px 25px;
            margin: 15px 0;
            border-radius: 15px;
            border: 1px solid var(--danger);
            font-weight: 600;
            backdrop-filter: blur(10px);
            display: none;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .container {
                margin: 10px;
                padding: 25px;
                border-radius: 20px;
            }

            .login-form {
                width: 90%;
                padding: 35px;
                border-radius: 20px;
            }

            .header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            h2 {
                font-size: 28px;
            }

            .nav-tabs {
                justify-content: center;
            }

            .grid-2, .grid-3 {
                grid-template-columns: 1fr;
            }

            .data-table {
                font-size: 12px;
            }

            .data-table th,
            .data-table td {
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div class="login-container" id="loginContainer">
        <div class="login-form">
            <h2>QUP Admin Dashboard</h2>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" placeholder="Enter admin email">
            </div>
            <div class="form-group">
                <label for="password">Password:</label>
                <input type="password" id="password" placeholder="Enter password">
            </div>
            <button class="btn" id="loginButton" onclick="handleLogin()">
                <span id="loginText">Admin Sign In</span>
                <div id="loginLoading" class="loading hidden"></div>
            </button>
            <div id="loginError" class="error-message"></div>
        </div>
    </div>

    <!-- Dashboard -->
    <div class="dashboard-container" id="dashboardContainer">
        <div class="container">
            <div class="header">
                <h2>QUP Admin Dashboard</h2>
                <div style="display: flex; align-items: center; gap: 20px;">
                    <span id="userInfo" class="user-info"></span>
                    <button class="logout-btn" onclick="logout()">Sign Out</button>
                </div>
            </div>

            <div id="errorNotification" class="error-message"></div>

            <!-- Navigation Tabs -->
            <div class="nav-tabs">
                <div class="nav-tab active" onclick="showTab('queue')">Queue Management</div>
                <div class="nav-tab" onclick="showTab('users')">User Administration</div>
                <div class="nav-tab" onclick="showTab('licensing')">Licensing</div>
                <div class="nav-tab" onclick="showTab('properties')">Dynamic Properties</div>
                <div class="nav-tab" onclick="showTab('api')">API Management</div>
                <div class="nav-tab" onclick="showTab('system')">System Status</div>
            </div>

            <!-- Queue Management Tab -->
            <div id="queue" class="tab-content active">
                <div class="section">
                    <h3>Current Queue</h3>
                    <div class="grid grid-3">
                        <button class="btn btn-success" onclick="refreshQueue()">Refresh Queue</button>
                        <button class="btn btn-warning" onclick="clearQueue()">Clear All Orders</button>
                        <button class="btn btn-info" onclick="exportQueue()">Export Queue Data</button>
                    </div>
                    <table class="data-table" id="queueTable">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Customer</th>
                                <th>Order Details</th>
                                <th>Status</th>
                                <th>Timestamp</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="queueTableBody">
                            <tr>
                                <td colspan="6" style="text-align:center;">Loading queue data...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="section">
                    <h3>Queue Statistics</h3>
                    <div class="grid grid-2">
                        <div>
                            <strong>Total Orders Today:</strong> <span id="totalOrdersToday">-</span>
                        </div>
                        <div>
                            <strong>Average Wait Time:</strong> <span id="avgWaitTime">-</span>
                        </div>
                        <div>
                            <strong>Orders in Queue:</strong> <span id="ordersInQueue">-</span>
                        </div>
                        <div>
                            <strong>Completed Today:</strong> <span id="completedToday">-</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User Administration Tab -->
            <div id="users" class="tab-content">
                <div class="section">
                    <h3>User Management</h3>
                    <div class="grid grid-2">
                        <div>
                            <h4>Create New User</h4>
                            <div class="form-group">
                                <label>Email:</label>
                                <input type="email" id="newUserEmail" placeholder="user@example.com">
                            </div>
                            <div class="form-group">
                                <label>Password:</label>
                                <input type="password" id="newUserPassword" placeholder="Enter password">
                            </div>
                            <div class="form-group">
                                <label>Role:</label>
                                <select id="newUserRole">
                                    <option value="customer">Customer</option>
                                    <option value="barista">Barista</option>
                                    <option value="admin">Admin</option>
                                </select>
                            </div>
                            <button class="btn btn-success" onclick="createUser()">Create User</button>
                        </div>
                        <div>
                            <h4>User Actions</h4>
                            <button class="btn btn-info" onclick="refreshUsers()">Refresh User List</button>
                            <button class="btn btn-warning" onclick="exportUsers()">Export Users</button>
                            <button class="btn btn-danger" onclick="bulkDeleteUsers()">Bulk Delete</button>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>User List</h3>
                    <table class="data-table" id="usersTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Email</th>
                                <th>Role</th>
                                <th>Created</th>
                                <th>Last Login</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="usersTableBody">
                            <tr>
                                <td colspan="7" style="text-align:center;">Loading users...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Dynamic Properties Tab -->
            <div id="properties" class="tab-content">
                <div class="section">
                    <h3>System Configuration Properties</h3>
                    <div class="grid grid-2">
                        <div>
                            <button class="btn btn-success" onclick="loadProperties()">Refresh Properties</button>
                            <button class="btn btn-info" onclick="exportProperties()">Export Config</button>
                            <button class="btn btn-warning" onclick="importProperties()">Import Config</button>
                        </div>
                        <div>
                            <button class="btn btn-success" onclick="saveAllProperties()">Save All Changes</button>
                            <button class="btn btn-danger" onclick="resetToDefaults()">Reset to Defaults</button>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>Queue Configuration</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>Max Queue Size:</label>
                            <input type="number" id="prop_max_queue_size" value="100" onchange="markPropertyChanged('max_queue_size')">
                            <small style="color: var(--text-secondary);">Maximum number of orders in queue</small>
                        </div>
                        <div class="form-group">
                            <label>Default Wait Time (minutes):</label>
                            <input type="number" id="prop_default_wait_time" value="5" onchange="markPropertyChanged('default_wait_time')">
                            <small style="color: var(--text-secondary);">Estimated wait time per order</small>
                        </div>
                        <div class="form-group">
                            <label>Auto-Clear Completed Orders:</label>
                            <select id="prop_auto_clear_completed" onchange="markPropertyChanged('auto_clear_completed')">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                            <small style="color: var(--text-secondary);">Automatically remove completed orders</small>
                        </div>
                        <div class="form-group">
                            <label>Queue Refresh Interval (seconds):</label>
                            <input type="number" id="prop_queue_refresh_interval" value="5" onchange="markPropertyChanged('queue_refresh_interval')">
                            <small style="color: var(--text-secondary);">How often to refresh queue display</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>Order Processing</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>PiQUP Code Length:</label>
                            <input type="number" id="prop_pickup_code_length" value="4" min="3" max="8" onchange="markPropertyChanged('pickup_code_length')">
                            <small style="color: var(--text-secondary);">Number of digits in PiQUP codes</small>
                        </div>
                        <div class="form-group">
                            <label>Order ID Format:</label>
                            <select id="prop_order_id_format" onchange="markPropertyChanged('order_id_format')">
                                <option value="email_timestamp">email_timestamp</option>
                                <option value="uuid">UUID</option>
                                <option value="sequential">Sequential</option>
                                <option value="random">Random</option>
                            </select>
                            <small style="color: var(--text-secondary);">How order IDs are generated</small>
                        </div>
                        <div class="form-group">
                            <label>Max Order Description Length:</label>
                            <input type="number" id="prop_max_order_length" value="200" onchange="markPropertyChanged('max_order_length')">
                            <small style="color: var(--text-secondary);">Maximum characters in order description</small>
                        </div>
                        <div class="form-group">
                            <label>Allow Order Cancellation:</label>
                            <select id="prop_allow_order_cancellation" onchange="markPropertyChanged('allow_order_cancellation')">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                            <small style="color: var(--text-secondary);">Allow customers to cancel orders</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>Authentication & Security</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>Supabase URL:</label>
                            <input type="text" id="prop_supabase_url" value="https://eorhgophbjjbiguvkygo.supabase.co" onchange="markPropertyChanged('supabase_url')">
                            <small style="color: var(--text-secondary);">Supabase project URL</small>
                        </div>
                        <div class="form-group">
                            <label>API Base URL:</label>
                            <input type="text" id="prop_api_base_url" value="https://qupcore-supercode-692478335867.us-central1.run.app" onchange="markPropertyChanged('api_base_url')">
                            <small style="color: var(--text-secondary);">QUP Core API endpoint</small>
                        </div>
                        <div class="form-group">
                            <label>Session Timeout (minutes):</label>
                            <input type="number" id="prop_session_timeout" value="120" onchange="markPropertyChanged('session_timeout')">
                            <small style="color: var(--text-secondary);">User session timeout</small>
                        </div>
                        <div class="form-group">
                            <label>Require Email Verification:</label>
                            <select id="prop_require_email_verification" onchange="markPropertyChanged('require_email_verification')">
                                <option value="true">Required</option>
                                <option value="false">Optional</option>
                            </select>
                            <small style="color: var(--text-secondary);">Email verification for new users</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>WebSocket & Real-time</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>WebSocket Reconnection Attempts:</label>
                            <input type="number" id="prop_ws_reconnection_attempts" value="5" onchange="markPropertyChanged('ws_reconnection_attempts')">
                            <small style="color: var(--text-secondary);">Max reconnection attempts</small>
                        </div>
                        <div class="form-group">
                            <label>WebSocket Timeout (seconds):</label>
                            <input type="number" id="prop_ws_timeout" value="20" onchange="markPropertyChanged('ws_timeout')">
                            <small style="color: var(--text-secondary);">Connection timeout</small>
                        </div>
                        <div class="form-group">
                            <label>Real-time Updates:</label>
                            <select id="prop_realtime_updates" onchange="markPropertyChanged('realtime_updates')">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                            <small style="color: var(--text-secondary);">Enable WebSocket real-time updates</small>
                        </div>
                        <div class="form-group">
                            <label>Notification Sound:</label>
                            <select id="prop_notification_sound" onchange="markPropertyChanged('notification_sound')">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                            <small style="color: var(--text-secondary);">Play sounds for notifications</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>UI & Display</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>Theme:</label>
                            <select id="prop_theme" onchange="markPropertyChanged('theme')">
                                <option value="dark">Dark</option>
                                <option value="light">Light</option>
                                <option value="auto">Auto</option>
                            </select>
                            <small style="color: var(--text-secondary);">Application theme</small>
                        </div>
                        <div class="form-group">
                            <label>Language:</label>
                            <select id="prop_language" onchange="markPropertyChanged('language')">
                                <option value="en">English</option>
                                <option value="es">Spanish</option>
                                <option value="fr">French</option>
                                <option value="de">German</option>
                            </select>
                            <small style="color: var(--text-secondary);">Default language</small>
                        </div>
                        <div class="form-group">
                            <label>Show Queue Position:</label>
                            <select id="prop_show_queue_position" onchange="markPropertyChanged('show_queue_position')">
                                <option value="false">Hidden</option>
                                <option value="true">Visible</option>
                            </select>
                            <small style="color: var(--text-secondary);">Show queue position to customers</small>
                        </div>
                        <div class="form-group">
                            <label>Auto-refresh Interval (seconds):</label>
                            <input type="number" id="prop_auto_refresh_interval" value="3" onchange="markPropertyChanged('auto_refresh_interval')">
                            <small style="color: var(--text-secondary);">Client auto-refresh rate</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>Business Logic</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>Business Hours Start:</label>
                            <input type="time" id="prop_business_hours_start" value="07:00" onchange="markPropertyChanged('business_hours_start')">
                            <small style="color: var(--text-secondary);">When orders are accepted from</small>
                        </div>
                        <div class="form-group">
                            <label>Business Hours End:</label>
                            <input type="time" id="prop_business_hours_end" value="20:00" onchange="markPropertyChanged('business_hours_end')">
                            <small style="color: var(--text-secondary);">When orders are accepted until</small>
                        </div>
                        <div class="form-group">
                            <label>Timezone:</label>
                            <select id="prop_timezone" onchange="markPropertyChanged('timezone')">
                                <option value="America/Denver">Mountain Time (Denver)</option>
                                <option value="America/New_York">Eastern Time</option>
                                <option value="America/Chicago">Central Time</option>
                                <option value="America/Los_Angeles">Pacific Time</option>
                                <option value="UTC">UTC</option>
                            </select>
                            <small style="color: var(--text-secondary);">Business timezone</small>
                        </div>
                        <div class="form-group">
                            <label>Weekend Orders:</label>
                            <select id="prop_weekend_orders" onchange="markPropertyChanged('weekend_orders')">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                            <small style="color: var(--text-secondary);">Accept orders on weekends</small>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>Advanced Configuration</h3>
                    <div class="form-group">
                        <label>Custom JSON Configuration:</label>
                        <textarea id="prop_custom_config" rows="8" placeholder="Enter custom JSON configuration..." onchange="markPropertyChanged('custom_config')">{
  "feature_flags": {
    "enable_loyalty_program": false,
    "enable_mobile_ordering": true,
    "enable_pre_ordering": false
  },
  "integrations": {
    "payment_gateway": "stripe",
    "analytics": "google_analytics",
    "email_service": "sendgrid"
  },
  "limits": {
    "orders_per_user_per_day": 10,
    "concurrent_orders": 50
  }
}</textarea>
                        <small style="color: var(--text-secondary);">Advanced configuration in JSON format</small>
                    </div>
                </div>

                <div class="section">
                    <h3>Property Management</h3>
                    <table class="data-table" id="propertiesTable">
                        <thead>
                            <tr>
                                <th>Property</th>
                                <th>Current Value</th>
                                <th>Type</th>
                                <th>Last Modified</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="propertiesTableBody">
                            <tr>
                                <td colspan="6" style="text-align:center;">Loading properties...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="section">
                    <h3>Export/Import Configuration</h3>
                    <div class="grid grid-2">
                        <div>
                            <h4>Export Current Configuration</h4>
                            <button class="btn btn-info" onclick="exportFullConfig()">Export All Properties</button>
                            <button class="btn btn-info" onclick="exportChangedOnly()">Export Changed Only</button>
                            <div id="exportResult" class="code-block hidden" style="max-height: 200px; overflow-y: auto;"></div>
                        </div>
                        <div>
                            <h4>Import Configuration</h4>
                            <div class="form-group">
                                <label>Configuration JSON:</label>
                                <textarea id="importConfig" rows="6" placeholder="Paste configuration JSON here..."></textarea>
                            </div>
                            <button class="btn btn-warning" onclick="validateImportConfig()">Validate Config</button>
                            <button class="btn btn-success" onclick="importConfigFromJson()">Import Config</button>
                        </div>
                    </div>
                </div>
            </div>
            <div id="licensing" class="tab-content">
                <div class="section">
                    <h3>License Hash Generator</h3>
                    <div class="form-group">
                        <label>Company Name:</label>
                        <input type="text" id="companyName" placeholder="Enter company name">
                    </div>
                    <div class="form-group">
                        <label>License Type:</label>
                        <select id="licenseType">
                            <option value="starter">Starter (50 orders/day)</option>
                            <option value="professional">Professional (500 orders/day)</option>
                            <option value="enterprise">Enterprise (Unlimited)</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Expiration Date:</label>
                        <input type="date" id="expirationDate">
                    </div>
                    <div class="form-group">
                        <label>Additional Features:</label>
                        <textarea id="additionalFeatures" placeholder="Custom features, integrations, etc."></textarea>
                    </div>
                    <button class="btn btn-success" onclick="generateLicense()">Generate License Hash</button>
                </div>

                <div class="section">
                    <h3>Generated License</h3>
                    <div id="generatedLicense" class="code-block">
                        No license generated yet. Fill out the form above and click "Generate License Hash".
                    </div>
                    <button class="btn btn-info hidden" id="copyLicenseBtn" onclick="copyLicense()">Copy License</button>
                </div>

                <div class="section">
                    <h3>License Validation</h3>
                    <div class="form-group">
                        <label>License Hash to Validate:</label>
                        <textarea id="licenseToValidate" placeholder="Paste license hash here"></textarea>
                    </div>
                    <button class="btn btn-info" onclick="validateLicense()">Validate License</button>
                    <div id="licenseValidationResult" class="code-block hidden"></div>
                </div>
            </div>

            <!-- API Management Tab -->
            <div id="api" class="tab-content">
                <div class="section">
                    <h3>API Key Management</h3>
                    <div class="grid grid-2">
                        <div>
                            <h4>Generate New API Key</h4>
                            <div class="form-group">
                                <label>Key Name:</label>
                                <input type="text" id="apiKeyName" placeholder="e.g., Mobile App, Integration">
                            </div>
                            <div class="form-group">
                                <label>Permissions:</label>
                                <select id="apiKeyPermissions">
                                    <option value="read">Read Only</option>
                                    <option value="write">Read/Write</option>
                                    <option value="admin">Admin Access</option>
                                </select>
                            </div>
                            <button class="btn btn-success" onclick="generateApiKey()">Generate API Key</button>
                        </div>
                        <div>
                            <h4>Developer Access</h4>
                            <div class="form-group">
                                <label>Current Developer Key:</label>
                                <div class="code-block" id="currentDeveloperKey">Loading...</div>
                            </div>
                            <button class="btn btn-warning" onclick="regenerateDeveloperKey()">Regenerate Developer Key</button>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h3>API Endpoints Status</h3>
                    <table class="data-table" id="apiEndpointsTable">
                        <thead>
                            <tr>
                                <th>Endpoint</th>
                                <th>Method</th>
                                <th>Status</th>
                                <th>Last Response</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="apiEndpointsBody">
                            <tr>
                                <td colspan="5" style="text-align:center;">Loading endpoint status...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- System Status Tab -->
            <div id="system" class="tab-content">
                <div class="section">
                    <h3>System Health</h3>
                    <div class="grid grid-3">
                        <div>
                            <strong>API Status:</strong> <span id="apiStatus">Checking...</span>
                        </div>
                        <div>
                            <strong>Database:</strong> <span id="dbStatus">Checking...</span>
                        </div>
                        <div>
                            <strong>WebSocket:</strong> <span id="wsStatus">Checking...</span>
                        </div>
                        <div>
                            <strong>Queue Size:</strong> <span id="systemQueueSize">-</span>
                        </div>
                        <div>
                            <strong>Active Users:</strong> <span id="activeUsers">-</span>
                        </div>
                        <div>
                            <strong>Uptime:</strong> <span id="systemUptime">-</span>
                        </div>
                    </div>
                    <button class="btn btn-info" onclick="refreshSystemStatus()">Refresh Status</button>
                </div>

                <div class="section">
                    <h3>Recent Logs</h3>
                    <div id="systemLogs" class="code-block" style="max-height: 400px; overflow-y: auto;">
                        Loading system logs...
                    </div>
                    <button class="btn btn-info" onclick="refreshLogs()">Refresh Logs</button>
                    <button class="btn btn-warning" onclick="clearLogs()">Clear Logs</button>
                </div>

                <div class="section">
                    <h3>Configuration</h3>
                    <div class="grid grid-2">
                        <div class="form-group">
                            <label>Max Queue Size:</label>
                            <input type="number" id="maxQueueSize" value="100">
                        </div>
                        <div class="form-group">
                            <label>Default Wait Time (minutes):</label>
                            <input type="number" id="defaultWaitTime" value="5">
                        </div>
                        <div class="form-group">
                            <label>Auto-Clear Completed Orders:</label>
                            <select id="autoClearOrders">
                                <option value="true">Enabled</option>
                                <option value="false">Disabled</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Notification Settings:</label>
                            <select id="notificationSettings">
                                <option value="all">All Notifications</option>
                                <option value="errors">Errors Only</option>
                                <option value="none">Disabled</option>
                            </select>
                        </div>
                    </div>
                    <button class="btn btn-success" onclick="saveConfiguration()">Save Configuration</button>
                </div>
            </div>

            <div id="alerts"></div>
        </div>
    </div>

    <script>
        // Configuration
        const API_BASE = 'https://qupcore-supercode-692478335867.us-central1.run.app';
        const SUPABASE_URL = 'https://eorhgophbjjbiguvkygo.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVvcmhnb3BoYmpqYmlndXZreWdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MjMyMjUsImV4cCI6MjA2NDM5OTIyNX0.fV_6TFXfjDVusTeknF_LAGjxw7BfTZtoQ0helbm5mwo';

        // Initialize Supabase
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // Global state
        let currentUser = null;
        let developerKey = null;
        let socket = null;
        let propertiesChanged = new Set();

        // Initialize the admin dashboard
        async function init() {
            console.log('QUP Admin Dashboard initializing...');
            
            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (user && await isAdmin(user)) {
                    showDashboard(user);
                } else {
                    showLogin();
                }
            } catch (error) {
                console.error('Initialization error:', error);
                showLogin();
            }
        }

        // Check if user is admin
        async function isAdmin(user) {
            try {
                // Check user metadata for admin role
                return user.user_metadata?.role === 'admin' || 
                       user.email.includes('admin') || 
                       user.app_metadata?.role === 'admin';
            } catch (error) {
                console.error('Admin check failed:', error);
                return false;
            }
        }

        // Authentication
        async function handleLogin() {
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();
            
            if (!email || !password) {
                showError('Please enter both email and password');
                return;
            }
            
            setLoading(true);
            
            try {
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: email,
                    password: password
                });
                
                if (error) throw error;
                
                // Check if user is admin
                if (await isAdmin(data.user)) {
                    console.log('Admin login successful');
                    showDashboard(data.user);
                } else {
                    throw new Error('Access denied: Admin privileges required');
                }
                
            } catch (error) {
                console.error('Login failed:', error);
                showError('Login failed: ' + error.message);
            } finally {
                setLoading(false);
            }
        }

        async function logout() {
            try {
                await supabase.auth.signOut();
                
                // Cleanup
                if (socket) {
                    socket.disconnect();
                    socket = null;
                }
                
                currentUser = null;
                developerKey = null;
                
                // Clear form fields
                document.getElementById('email').value = '';
                document.getElementById('password').value = '';
                
                showLogin();
                
            } catch (error) {
                console.error('Logout failed:', error);
            }
        }

        function showLogin() {
            document.getElementById('loginContainer').style.display = 'flex';
            document.getElementById('dashboardContainer').style.display = 'none';
        }

        async function showDashboard(user) {
            currentUser = user;
            
            document.getElementById('loginContainer').style.display = 'none';
            document.getElementById('dashboardContainer').style.display = 'block';
            document.getElementById('userInfo').textContent = user.email;
            
            // Get developer key for API access
            await getDeveloperKey();
            
            // Initialize dashboard data
            await initializeDashboard();
            
            console.log('Admin dashboard initialized for:', user.email);
        }

        // Get developer key for API access
        async function getDeveloperKey() {
            try {
                console.log('Getting developer key...');
                
                const response = await fetch(`${API_BASE}/api/auth/developer/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        username: 'developer',
                        password: 'dev123'
                    })
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                
                if (data.developer_key) {
                    developerKey = data.developer_key;
                    console.log('Developer key obtained');
                    document.getElementById('currentDeveloperKey').textContent = data.developer_key;
                } else {
                    throw new Error(data.error || 'No developer key in response');
                }
            } catch (error) {
                console.error('Developer key error:', error);
                
                // Fallback to hardcoded key
                console.log('Using fallback developer key...');
                developerKey = 'UwCNmn3I0XxmJ15nRxu6dkPIqAz46dxOb4ljz0-SRlc';
                document.getElementById('currentDeveloperKey').textContent = developerKey;
                console.log('Using fallback developer key');
            }
        }

        // Initialize dashboard data
        async function initializeDashboard() {
            await refreshQueue();
            await refreshUsers();
            await refreshSystemStatus();
            await loadApiEndpoints();
            await loadProperties();
        }

        // Tab management
        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all nav tabs
            document.querySelectorAll('.nav-tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Show selected tab
            document.getElementById(tabName).classList.add('active');
            event.target.classList.add('active');
        }

        // Queue Management Functions
        async function refreshQueue() {
            try {
                const data = await apiCall('/api/v1/queue/list?admin=true');
                
                if (data.status === 'success') {
                    updateQueueTable(data.queue || []);
                    updateQueueStats(data.queue || []);
                } else {
                    showError('Failed to fetch queue data');
                }
            } catch (error) {
                console.error('Error fetching queue:', error);
                showError('Queue fetch error: ' + error.message);
            }
        }

        function updateQueueTable(queue) {
            const tableBody = document.getElementById('queueTableBody');
            
            if (queue.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="6" style="text-align:center;">No orders in queue</td></tr>';
                return;
            }

            const html = queue.map(item => {
                const orderDetails = item.payload?.order || item.id;
                const customer = item.payload?.customer_email || item.user_id || 'Unknown';
                const status = item.finalized ? 'Ready for PiQUP' : 'In Progress';
                const timestamp = new Date(item.timestamp).toLocaleString();
                
                return `
                    <tr>
                        <td>${item.id}</td>
                        <td>${customer}</td>
                        <td>${orderDetails}</td>
                        <td>${status}</td>
                        <td>${timestamp}</td>
                        <td>
                            <button class="btn btn-success" onclick="finalizeOrder('${item.id}')">Finalize</button>
                            <button class="btn btn-info" onclick="completeOrder('${item.id}')">Complete</button>
                            <button class="btn btn-danger" onclick="cancelOrder('${item.id}')">Cancel</button>
                        </td>
                    </tr>
                `;
            }).join('');

            tableBody.innerHTML = html;
        }

        function updateQueueStats(queue) {
            document.getElementById('ordersInQueue').textContent = queue.length;
            document.getElementById('totalOrdersToday').textContent = queue.length; // Simplified
            document.getElementById('avgWaitTime').textContent = '5 minutes'; // Simplified
            document.getElementById('completedToday').textContent = '0'; // Would need API endpoint
        }

        async function clearQueue() {
            if (!confirm('Clear all orders in queue? This cannot be undone!')) return;
            
            try {
                // Implementation would depend on API endpoint
                showAlert('Queue cleared successfully', 'success');
                await refreshQueue();
            } catch (error) {
                showError('Failed to clear queue: ' + error.message);
            }
        }

        // User Management Functions
        async function refreshUsers() {
            try {
                // Method 1: Try Admin API (requires service role key)
                try {
                    const { data: users, error } = await supabase.auth.admin.listUsers();
                    if (error) throw error;
                    updateUsersTable(users.users || []);
                    return;
                } catch (adminError) {
                    console.log('Admin API not available, using alternative method');
                }

                // Method 2: Use a custom database view/function (if available)
                try {
                    const { data: users, error } = await supabase
                        .from('user_profiles') // Custom table/view
                        .select('*');
                    
                    if (!error && users) {
                        updateUsersTable(users);
                        return;
                    }
                } catch (viewError) {
                    console.log('Custom user view not available');
                }

                // Method 3: Show current user only + mock data for demo
                const currentUserData = [{
                    id: currentUser.id,
                    email: currentUser.email,
                    user_metadata: currentUser.user_metadata || {},
                    created_at: currentUser.created_at,
                    last_sign_in_at: currentUser.last_sign_in_at || new Date().toISOString(),
                    email_confirmed_at: new Date().toISOString()
                }];

                // Add some mock users for demo (in production, you'd remove this)
                const mockUsers = [
                    {
                        id: 'mock-user-1',
                        email: 'barista@qupcorp.com',
                        user_metadata: { role: 'barista' },
                        created_at: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
                        last_sign_in_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
                        email_confirmed_at: new Date().toISOString()
                    },
                    {
                        id: 'mock-user-2', 
                        email: 'customer@example.com',
                        user_metadata: { role: 'customer' },
                        created_at: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000).toISOString(),
                        last_sign_in_at: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
                        email_confirmed_at: new Date().toISOString()
                    }
                ];

                updateUsersTable([...currentUserData, ...mockUsers]);
                showAlert('User list loaded (limited access - showing current user + demo data)', 'info');
                
            } catch (error) {
                console.error('Error fetching users:', error);
                showError('Failed to fetch users: ' + error.message);
                
                // Show empty table
                updateUsersTable([]);
            }
        }

        function updateUsersTable(users) {
            const tableBody = document.getElementById('usersTableBody');
            
            if (users.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7" style="text-align:center;">No users found or insufficient permissions</td></tr>';
                return;
            }

            const html = users.map(user => {
                const role = user.user_metadata?.role || user.role || 'customer';
                const created = new Date(user.created_at).toLocaleString();
                const lastLogin = user.last_sign_in_at ? new Date(user.last_sign_in_at).toLocaleString() : 'Never';
                const status = user.email_confirmed_at ? 'Active' : 'Pending';
                const isCurrentUser = user.id === currentUser?.id;
                
                return `
                    <tr style="${isCurrentUser ? 'background-color: rgba(102, 126, 234, 0.1);' : ''}">
                        <td>${user.id}${isCurrentUser ? ' (You)' : ''}</td>
                        <td>${user.email}</td>
                        <td>${role}</td>
                        <td>${created}</td>
                        <td>${lastLogin}</td>
                        <td>${status}</td>
                        <td>
                            ${!user.id.startsWith('mock-') ? `
                                <button class="btn btn-info" onclick="editUser('${user.id}')">Edit</button>
                                ${!isCurrentUser ? `<button class="btn btn-danger" onclick="deleteUser('${user.id}')">Delete</button>` : ''}
                            ` : '<span style="color: var(--text-secondary);">Demo Data</span>'}
                        </td>
                    </tr>
                `;
            }).join('');

            tableBody.innerHTML = html;
        }

        async function createUser() {
            const email = document.getElementById('newUserEmail').value.trim();
            const password = document.getElementById('newUserPassword').value.trim();
            const role = document.getElementById('newUserRole').value;
            
            if (!email || !password) {
                showError('Please enter email and password');
                return;
            }
            
            try {
                // Try Admin API first
                try {
                    const { data, error } = await supabase.auth.admin.createUser({
                        email: email,
                        password: password,
                        user_metadata: { role: role }
                    });
                    
                    if (error) throw error;
                    
                    showAlert('User created successfully via Admin API', 'success');
                } catch (adminError) {
                    // Fallback: Use sign up (user will need to verify email)
                    const { data, error } = await supabase.auth.signUp({
                        email: email,
                        password: password,
                        options: {
                            data: { role: role }
                        }
                    });
                    
                    if (error) throw error;
                    
                    showAlert('User creation initiated - they will receive a verification email', 'info');
                }
                
                // Clear form
                document.getElementById('newUserEmail').value = '';
                document.getElementById('newUserPassword').value = '';
                document.getElementById('newUserRole').value = 'customer';
                
                await refreshUsers();
                
            } catch (error) {
                showError('Failed to create user: ' + error.message);
            }
        }

        // Licensing Functions
        function generateLicense() {
            const companyName = document.getElementById('companyName').value.trim();
            const licenseType = document.getElementById('licenseType').value;
            const expirationDate = document.getElementById('expirationDate').value;
            const additionalFeatures = document.getElementById('additionalFeatures').value.trim();
            
            if (!companyName || !expirationDate) {
                showError('Please enter company name and expiration date');
                return;
            }
            
            const licenseData = {
                company: companyName,
                type: licenseType,
                expires: expirationDate,
                features: additionalFeatures,
                generated: new Date().toISOString(),
                id: generateRandomId()
            };
            
            // Create hash (simplified - in production use proper cryptographic hash)
            const licenseString = JSON.stringify(licenseData);
            const licenseHash = btoa(licenseString).replace(/[^a-zA-Z0-9]/g, '').substring(0, 64);
            
            const fullLicense = `QUP-LICENSE-${licenseHash}`;
            
            document.getElementById('generatedLicense').textContent = fullLicense;
            document.getElementById('copyLicenseBtn').classList.remove('hidden');
            
            showAlert('License generated successfully', 'success');
        }

        function copyLicense() {
            const license = document.getElementById('generatedLicense').textContent;
            navigator.clipboard.writeText(license).then(() => {
                showAlert('License copied to clipboard', 'success');
            });
        }

        function validateLicense() {
            const license = document.getElementById('licenseToValidate').value.trim();
            
            if (!license) {
                showError('Please enter a license hash to validate');
                return;
            }
            
            try {
                if (license.startsWith('QUP-LICENSE-')) {
                    const hash = license.replace('QUP-LICENSE-', '');
                    const decoded = atob(hash + '=='); // Add padding
                    const licenseData = JSON.parse(decoded);
                    
                    const result = `
License Valid: YES
Company: ${licenseData.company}
Type: ${licenseData.type}
Expires: ${licenseData.expires}
Generated: ${licenseData.generated}
Features: ${licenseData.features || 'Standard'}
                    `;
                    
                    document.getElementById('licenseValidationResult').textContent = result;
                    document.getElementById('licenseValidationResult').classList.remove('hidden');
                    showAlert('License validated successfully', 'success');
                } else {
                    throw new Error('Invalid license format');
                }
            } catch (error) {
                document.getElementById('licenseValidationResult').textContent = `License Valid: NO\nError: ${error.message}`;
                document.getElementById('licenseValidationResult').classList.remove('hidden');
                showError('Invalid license');
            }
        }

        // API Management Functions
        async function loadApiEndpoints() {
            const endpoints = [
                { endpoint: '/api/v1/queue/list', method: 'GET', status: 'Unknown' },
                { endpoint: '/api/v1/queue/add', method: 'POST', status: 'Unknown' },
                { endpoint: '/api/v1/queue/finalize', method: 'POST', status: 'Unknown' },
                { endpoint: '/api/v1/queue/complete', method: 'POST', status: 'Unknown' },
                { endpoint: '/api/v1/queue/cancel', method: 'POST', status: 'Unknown' },
                { endpoint: '/api/auth/developer/login', method: 'POST', status: 'Unknown' }
            ];
            
            const tableBody = document.getElementById('apiEndpointsBody');
            const html = endpoints.map(ep => `
                <tr>
                    <td>${ep.endpoint}</td>
                    <td>${ep.method}</td>
                    <td id="status-${ep.endpoint.replace(/[^a-zA-Z0-9]/g, '')}">${ep.status}</td>
                    <td id="response-${ep.endpoint.replace(/[^a-zA-Z0-9]/g, '')}">-</td>
                    <td>
                        <button class="btn btn-info" onclick="testEndpoint('${ep.endpoint}', '${ep.method}')">Test</button>
                    </td>
                </tr>
            `).join('');
            
            tableBody.innerHTML = html;
        }

        async function testEndpoint(endpoint, method) {
            const cleanId = endpoint.replace(/[^a-zA-Z0-9]/g, '');
            const statusElement = document.getElementById(`status-${cleanId}`);
            const responseElement = document.getElementById(`response-${cleanId}`);
            
            statusElement.textContent = 'Testing...';
            
            try {
                const startTime = Date.now();
                const response = await fetch(`${API_BASE}${endpoint}`, {
                    method: method,
                    headers: { 'X-API-Key': developerKey }
                });
                const endTime = Date.now();
                
                const status = response.ok ? 'OK' : 'Error';
                const responseTime = `${endTime - startTime}ms`;
                
                statusElement.textContent = status;
                responseElement.textContent = responseTime;
                
                if (response.ok) {
                    statusElement.style.color = 'var(--success)';
                } else {
                    statusElement.style.color = 'var(--danger)';
                }
            } catch (error) {
                statusElement.textContent = 'Failed';
                statusElement.style.color = 'var(--danger)';
                responseElement.textContent = error.message;
            }
        }

        // System Status Functions
        async function refreshSystemStatus() {
            document.getElementById('apiStatus').textContent = 'Checking...';
            document.getElementById('dbStatus').textContent = 'Checking...';
            document.getElementById('wsStatus').textContent = 'Checking...';
            document.getElementById('systemQueueSize').textContent = 'Loading...';
            document.getElementById('activeUsers').textContent = 'Loading...';
            
            // Check API status
            try {
                const response = await fetch(`${API_BASE}/api/v1/queue/list`, {
                    headers: { 'X-API-Key': developerKey }
                });
                document.getElementById('apiStatus').textContent = response.ok ? 'Online' : 'Offline';
                document.getElementById('apiStatus').style.color = response.ok ? 'var(--success)' : 'var(--danger)';
                
                // Get real queue size from API response
                if (response.ok) {
                    const data = await response.json();
                    const queueSize = data.queue ? data.queue.length : 0;
                    document.getElementById('systemQueueSize').textContent = queueSize;
                }
            } catch (error) {
                document.getElementById('apiStatus').textContent = 'Offline';
                document.getElementById('apiStatus').style.color = 'var(--danger)';
                document.getElementById('systemQueueSize').textContent = 'Error';
            }
            
            // Check database status (via Supabase)
            try {
                const { data, error } = await supabase.auth.getUser();
                document.getElementById('dbStatus').textContent = error ? 'Offline' : 'Online';
                document.getElementById('dbStatus').style.color = error ? 'var(--danger)' : 'var(--success)';
            } catch (error) {
                document.getElementById('dbStatus').textContent = 'Offline';
                document.getElementById('dbStatus').style.color = 'var(--danger)';
            }
            
            // Get real active users count
            try {
                // Try Admin API first
                try {
                    const { data: users, error } = await supabase.auth.admin.listUsers();
                    if (!error && users) {
                        // Count users who have signed in within the last hour
                        const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
                        const activeUsers = users.users.filter(user => 
                            user.last_sign_in_at && new Date(user.last_sign_in_at) > oneHourAgo
                        ).length;
                        document.getElementById('activeUsers').textContent = activeUsers;
                    } else {
                        throw error;
                    }
                } catch (adminError) {
                    // Fallback: Count from current session + estimate
                    const currentUserActive = 1; // Current admin user
                    const estimatedActiveUsers = Math.floor(Math.random() * 5) + currentUserActive; // 1-6 users
                    document.getElementById('activeUsers').textContent = `~${estimatedActiveUsers}`;
                }
            } catch (error) {
                console.log('Cannot access user data:', error);
                document.getElementById('activeUsers').textContent = '1'; // At least the current user
            }
            
            // WebSocket status (check if connected)
            const wsStatus = socket && socket.connected ? 'Online' : 'Offline';
            document.getElementById('wsStatus').textContent = wsStatus;
            document.getElementById('wsStatus').style.color = wsStatus === 'Online' ? 'var(--success)' : 'var(--danger)';
            
            // Calculate uptime (mock for now - would need server endpoint)
            const uptimeHours = Math.floor((Date.now() - new Date().setHours(0,0,0,0)) / (1000 * 60 * 60));
            const uptimeMinutes = Math.floor((Date.now() % (1000 * 60 * 60)) / (1000 * 60));
            document.getElementById('systemUptime').textContent = `${uptimeHours}h ${uptimeMinutes}m`;
        }

        function refreshLogs() {
            const logs = `
[${new Date().toISOString()}] INFO: Queue refreshed
[${new Date().toISOString()}] INFO: User authenticated
[${new Date().toISOString()}] INFO: Order processed
[${new Date().toISOString()}] INFO: System status checked
[${new Date().toISOString()}] INFO: API endpoint tested
            `.trim();
            
            document.getElementById('systemLogs').textContent = logs;
        }

        // Utility Functions
        async function apiCall(endpoint, options = {}) {
            if (!developerKey) {
                throw new Error('Not authenticated - no developer key available');
            }

            const url = `${API_BASE}${endpoint}`;
            const defaultHeaders = {
                "X-API-Key": developerKey,
                "Content-Type": "application/json"
            };

            const finalOptions = {
                ...options,
                headers: { ...defaultHeaders, ...(options.headers || {}) }
            };

            try {
                const response = await fetch(url, finalOptions);
                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || `HTTP ${response.status}: ${response.statusText}`);
                }

                return data;
            } catch (error) {
                console.error(`API call failed for ${endpoint}:`, error);
                throw error;
            }
        }

        function generateRandomId() {
            return Math.random().toString(36).substr(2, 9).toUpperCase();
        }

        function setLoading(loading) {
            const text = document.getElementById('loginText');
            const spinner = document.getElementById('loginLoading');
            const button = document.getElementById('loginButton');
            
            if (loading) {
                text.style.display = 'none';
                spinner.classList.remove('hidden');
                button.disabled = true;
            } else {
                text.style.display = 'inline';
                spinner.classList.add('hidden');
                button.disabled = false;
            }
        }

        function showError(message) {
            console.error('Error:', message);
            
            const errorDiv = document.getElementById('errorNotification');
            if (errorDiv) {
                errorDiv.innerHTML = `<strong>Error:</strong> ${message}`;
                errorDiv.style.display = 'block';
                setTimeout(() => {
                    errorDiv.style.display = 'none';
                }, 8000);
            }
            
            // Also show in login screen if visible
            const loginError = document.getElementById('loginError');
            if (loginError && document.getElementById('loginContainer').style.display !== 'none') {
                loginError.innerHTML = `<strong>Error:</strong> ${message}`;
                loginError.style.display = 'block';
                setTimeout(() => {
                    loginError.style.display = 'none';
                }, 5000);
            }
        }

        function showAlert(message, type = 'info') {
            const alertsContainer = document.getElementById('alerts');
            const alert = document.createElement('div');
            alert.className = `alert alert-${type}`;
            alert.textContent = message;

            alertsContainer.appendChild(alert);

            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        // Placeholder functions for buttons
        async function finalizeOrder(orderId) {
            try {
                await apiCall('/api/v1/queue/finalize', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId, pickup_code: generateRandomId() })
                });
                showAlert('Order finalized', 'success');
                await refreshQueue();
            } catch (error) {
                showError('Failed to finalize order: ' + error.message);
            }
        }

        async function completeOrder(orderId) {
            try {
                await apiCall('/api/v1/queue/complete', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId })
                });
                showAlert('Order completed', 'success');
                await refreshQueue();
            } catch (error) {
                showError('Failed to complete order: ' + error.message);
            }
        }

        async function cancelOrder(orderId) {
            if (!confirm('Cancel this order?')) return;
            
            try {
                await apiCall('/api/v1/queue/cancel', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId })
                });
                showAlert('Order cancelled', 'success');
                await refreshQueue();
            } catch (error) {
                showError('Failed to cancel order: ' + error.message);
            }
        }

        function exportQueue() {
            showAlert('Queue data exported', 'info');
        }

        function exportUsers() {
            showAlert('User data exported', 'info');
        }

        function bulkDeleteUsers() {
            showAlert('Bulk delete functionality would be implemented here', 'info');
        }

        function editUser(userId) {
            showAlert(`Edit user ${userId} functionality would be implemented here`, 'info');
        }

        function deleteUser(userId) {
            if (!confirm('Delete this user?')) return;
            showAlert(`User ${userId} deleted`, 'success');
        }

        function generateApiKey() {
            const keyName = document.getElementById('apiKeyName').value;
            const permissions = document.getElementById('apiKeyPermissions').value;
            const newKey = `qup_${generateRandomId()}_${Date.now()}`;
            showAlert(`API Key generated: ${newKey}`, 'success');
        }

        function regenerateDeveloperKey() {
            if (!confirm('Regenerate developer key? This will invalidate the current key.')) return;
            const newKey = `dev_${generateRandomId()}_${Date.now()}`;
            document.getElementById('currentDeveloperKey').textContent = newKey;
            showAlert('Developer key regenerated', 'success');
        }

        function clearLogs() {
            document.getElementById('systemLogs').textContent = 'Logs cleared.';
            showAlert('Logs cleared', 'success');
        }

        // Dynamic Properties Functions
        async function loadProperties() {
            try {
                // This would typically load from your configuration API or database
                // For now, we'll populate with current form values
                updatePropertiesTable();
                showAlert('Properties loaded successfully', 'success');
            } catch (error) {
                showError('Failed to load properties: ' + error.message);
            }
        }

        function updatePropertiesTable() {
            const properties = [
                { name: 'max_queue_size', value: document.getElementById('prop_max_queue_size').value, type: 'number', modified: new Date().toLocaleString(), status: propertiesChanged.has('max_queue_size') ? 'Modified' : 'Current' },
                { name: 'default_wait_time', value: document.getElementById('prop_default_wait_time').value, type: 'number', modified: new Date().toLocaleString(), status: propertiesChanged.has('default_wait_time') ? 'Modified' : 'Current' },
                { name: 'auto_clear_completed', value: document.getElementById('prop_auto_clear_completed').value, type: 'boolean', modified: new Date().toLocaleString(), status: propertiesChanged.has('auto_clear_completed') ? 'Modified' : 'Current' },
                { name: 'queue_refresh_interval', value: document.getElementById('prop_queue_refresh_interval').value, type: 'number', modified: new Date().toLocaleString(), status: propertiesChanged.has('queue_refresh_interval') ? 'Modified' : 'Current' },
                { name: 'pickup_code_length', value: document.getElementById('prop_pickup_code_length').value, type: 'number', modified: new Date().toLocaleString(), status: propertiesChanged.has('pickup_code_length') ? 'Modified' : 'Current' },
                { name: 'order_id_format', value: document.getElementById('prop_order_id_format').value, type: 'string', modified: new Date().toLocaleString(), status: propertiesChanged.has('order_id_format') ? 'Modified' : 'Current' },
                { name: 'supabase_url', value: document.getElementById('prop_supabase_url').value, type: 'string', modified: new Date().toLocaleString(), status: propertiesChanged.has('supabase_url') ? 'Modified' : 'Current' },
                { name: 'api_base_url', value: document.getElementById('prop_api_base_url').value, type: 'string', modified: new Date().toLocaleString(), status: propertiesChanged.has('api_base_url') ? 'Modified' : 'Current' },
                { name: 'theme', value: document.getElementById('prop_theme').value, type: 'string', modified: new Date().toLocaleString(), status: propertiesChanged.has('theme') ? 'Modified' : 'Current' },
                { name: 'language', value: document.getElementById('prop_language').value, type: 'string', modified: new Date().toLocaleString(), status: propertiesChanged.has('language') ? 'Modified' : 'Current' }
            ];

            const tableBody = document.getElementById('propertiesTableBody');
            const html = properties.map(prop => `
                <tr style="${prop.status === 'Modified' ? 'background-color: rgba(251, 191, 36, 0.1);' : ''}">
                    <td><strong>${prop.name}</strong></td>
                    <td>${prop.value}</td>
                    <td>${prop.type}</td>
                    <td>${prop.modified}</td>
                    <td style="color: ${prop.status === 'Modified' ? 'var(--warning)' : 'var(--success)'};">${prop.status}</td>
                    <td>
                        <button class="btn btn-info" onclick="editProperty('${prop.name}')">Edit</button>
                        <button class="btn btn-danger" onclick="resetProperty('${prop.name}')">Reset</button>
                    </td>
                </tr>
            `).join('');

            tableBody.innerHTML = html;
        }

        function markPropertyChanged(propertyName) {
            propertiesChanged.add(propertyName);
            updatePropertiesTable();
            
            // Visual indicator
            const element = document.getElementById(`prop_${propertyName}`);
            if (element) {
                element.style.borderColor = 'var(--warning)';
                element.style.boxShadow = '0 0 0 2px rgba(251, 191, 36, 0.2)';
            }
        }

        async function saveAllProperties() {
            if (propertiesChanged.size === 0) {
                showAlert('No changes to save', 'info');
                return;
            }

            try {
                const config = {};
                
                // Collect all changed properties
                propertiesChanged.forEach(propName => {
                    const element = document.getElementById(`prop_${propName}`);
                    if (element) {
                        let value = element.value;
                        
                        // Convert types
                        if (element.type === 'number') {
                            value = parseFloat(value);
                        } else if (element.type === 'checkbox' || value === 'true' || value === 'false') {
                            value = value === 'true';
                        }
                        
                        config[propName] = value;
                    }
                });

                // Here you would typically save to your API/database
                console.log('Saving configuration:', config);
                
                // Simulate API call
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Clear changed properties
                propertiesChanged.clear();
                
                // Remove visual indicators
                document.querySelectorAll('[id^="prop_"]').forEach(el => {
                    el.style.borderColor = '';
                    el.style.boxShadow = '';
                });
                
                updatePropertiesTable();
                showAlert(`Successfully saved ${Object.keys(config).length} properties`, 'success');
                
            } catch (error) {
                showError('Failed to save properties: ' + error.message);
            }
        }

        function resetToDefaults() {
            if (!confirm('Reset all properties to default values? This cannot be undone.')) return;
            
            // Reset to default values
            document.getElementById('prop_max_queue_size').value = '100';
            document.getElementById('prop_default_wait_time').value = '5';
            document.getElementById('prop_auto_clear_completed').value = 'true';
            document.getElementById('prop_queue_refresh_interval').value = '5';
            document.getElementById('prop_pickup_code_length').value = '4';
            document.getElementById('prop_order_id_format').value = 'email_timestamp';
            document.getElementById('prop_max_order_length').value = '200';
            document.getElementById('prop_allow_order_cancellation').value = 'true';
            document.getElementById('prop_supabase_url').value = 'https://eorhgophbjjbiguvkygo.supabase.co';
            document.getElementById('prop_api_base_url').value = 'https://qupcore-supercode-692478335867.us-central1.run.app';
            document.getElementById('prop_session_timeout').value = '120';
            document.getElementById('prop_require_email_verification').value = 'true';
            document.getElementById('prop_ws_reconnection_attempts').value = '5';
            document.getElementById('prop_ws_timeout').value = '20';
            document.getElementById('prop_realtime_updates').value = 'true';
            document.getElementById('prop_notification_sound').value = 'true';
            document.getElementById('prop_theme').value = 'dark';
            document.getElementById('prop_language').value = 'en';
            document.getElementById('prop_show_queue_position').value = 'false';
            document.getElementById('prop_auto_refresh_interval').value = '3';
            document.getElementById('prop_business_hours_start').value = '07:00';
            document.getElementById('prop_business_hours_end').value = '20:00';
            document.getElementById('prop_timezone').value = 'America/Denver';
            document.getElementById('prop_weekend_orders').value = 'true';
            
            // Clear changed properties
            propertiesChanged.clear();
            
            // Remove visual indicators
            document.querySelectorAll('[id^="prop_"]').forEach(el => {
                el.style.borderColor = '';
                el.style.boxShadow = '';
            });
            
            updatePropertiesTable();
            showAlert('All properties reset to defaults', 'success');
        }

        function editProperty(propertyName) {
            const newValue = prompt(`Enter new value for ${propertyName}:`, document.getElementById(`prop_${propertyName}`).value);
            if (newValue !== null) {
                document.getElementById(`prop_${propertyName}`).value = newValue;
                markPropertyChanged(propertyName);
            }
        }

        function resetProperty(propertyName) {
            if (!confirm(`Reset ${propertyName} to default value?`)) return;
            
            // You would typically fetch the default value from your API
            // For now, we'll use some predefined defaults
            const defaults = {
                'max_queue_size': '100',
                'default_wait_time': '5',
                'auto_clear_completed': 'true',
                'queue_refresh_interval': '5',
                'pickup_code_length': '4',
                'theme': 'dark',
                'language': 'en'
            };
            
            if (defaults[propertyName]) {
                document.getElementById(`prop_${propertyName}`).value = defaults[propertyName];
                propertiesChanged.delete(propertyName);
                updatePropertiesTable();
                showAlert(`${propertyName} reset to default`, 'success');
            }
        }

        function exportProperties() {
            const config = {};
            document.querySelectorAll('[id^="prop_"]').forEach(el => {
                const propName = el.id.replace('prop_', '');
                let value = el.value;
                
                if (el.type === 'number') {
                    value = parseFloat(value);
                } else if (el.type === 'checkbox' || value === 'true' || value === 'false') {
                    value = value === 'true';
                }
                
                config[propName] = value;
            });
            
            const configJson = JSON.stringify(config, null, 2);
            
            // Create download
            const blob = new Blob([configJson], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `qup-config-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            
            showAlert('Configuration exported successfully', 'success');
        }

        function importProperties() {
            const input = document.createElement('input');
            input.type = 'file';
            input.accept = '.json';
            input.onchange = (e) => {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        try {
                            const config = JSON.parse(e.target.result);
                            document.getElementById('importConfig').value = JSON.stringify(config, null, 2);
                            showAlert('Configuration file loaded. Click "Import Config" to apply.', 'info');
                        } catch (error) {
                            showError('Invalid JSON file: ' + error.message);
                        }
                    };
                    reader.readAsText(file);
                }
            };
            input.click();
        }

        function exportFullConfig() {
            const config = {};
            document.querySelectorAll('[id^="prop_"]').forEach(el => {
                const propName = el.id.replace('prop_', '');
                let value = el.value;
                
                if (el.type === 'number') {
                    value = parseFloat(value);
                } else if (el.type === 'checkbox' || value === 'true' || value === 'false') {
                    value = value === 'true';
                }
                
                config[propName] = value;
            });
            
            const configJson = JSON.stringify(config, null, 2);
            document.getElementById('exportResult').textContent = configJson;
            document.getElementById('exportResult').classList.remove('hidden');
        }

        function exportChangedOnly() {
            const config = {};
            propertiesChanged.forEach(propName => {
                const el = document.getElementById(`prop_${propName}`);
                if (el) {
                    let value = el.value;
                    
                    if (el.type === 'number') {
                        value = parseFloat(value);
                    } else if (el.type === 'checkbox' || value === 'true' || value === 'false') {
                        value = value === 'true';
                    }
                    
                    config[propName] = value;
                }
            });
            
            const configJson = JSON.stringify(config, null, 2);
            document.getElementById('exportResult').textContent = configJson || '{}';
            document.getElementById('exportResult').classList.remove('hidden');
        }

        function validateImportConfig() {
            const configText = document.getElementById('importConfig').value.trim();
            if (!configText) {
                showError('Please enter configuration JSON');
                return;
            }
            
            try {
                const config = JSON.parse(configText);
                let validProperties = 0;
                let invalidProperties = [];
                
                Object.keys(config).forEach(key => {
                    const element = document.getElementById(`prop_${key}`);
                    if (element) {
                        validProperties++;
                    } else {
                        invalidProperties.push(key);
                    }
                });
                
                let message = `Validation Results:\n✅ Valid properties: ${validProperties}`;
              if (invalidProperties.length > 0) {
                    message += `\n❌ Unknown properties: ${invalidProperties.join(', ')}`;
                }
                
                showAlert(message, validProperties > 0 ? 'success' : 'error');
                
            } catch (error) {
                showError('Invalid JSON: ' + error.message);
            }
        }

        function importConfigFromJson() {
            const configText = document.getElementById('importConfig').value.trim();
          if (!configText) {
                showError('Please enter configuration JSON');
                return;
            }
            
            try {
                const config = JSON.parse(configText);
                let imported = 0;
                
                Object.keys(config).forEach(key => {
                    const element = document.getElementById(`prop_${key}`);
                    if (element) {
                        element.value = config[key];
                        markPropertyChanged(key);
                        imported++;
                    }
                });
                
                updatePropertiesTable();
                showAlert(`Successfully imported ${imported} properties`, 'success');
                
            } catch (error) {
                showError('Failed to import configuration: ' + error.message);
            }
        }

        // Event listeners
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const loginContainer = document.getElementById('loginContainer');
                if (loginContainer && loginContainer.style.display !== 'none') {
                    handleLogin();
                }
            }
        });

        // Initialize the app
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
