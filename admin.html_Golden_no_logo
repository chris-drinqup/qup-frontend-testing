<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QUP Admin Dashboard</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #667eea;
            --primary-dark: #4c63d2;
            --secondary: #764ba2;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --info: #3b82f6;
            --bg-primary: #0f0f23;
            --bg-secondary: #1a1a3e;
            --bg-card: #262654;
            --text-primary: #ffffff;
            --text-secondary: #a5a5c9;
            --border: #3a3a6b;
            --shadow: rgba(0, 0, 0, 0.4);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
            color: var(--text-primary);
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            background: var(--bg-card);
            padding: 20px;
            border-radius: 15px;
            border: 1px solid var(--border);
        }

        .logo {
            font-size: 2rem;
            font-weight: 800;
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .connection-status {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
        }

        .connection-status.connected {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success);
            border: 1px solid var(--success);
        }

        .connection-status.disconnected {
            background: rgba(239, 68, 68, 0.2);
            color: var(--danger);
            border: 1px solid var(--danger);
        }

        .connection-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
            overflow-x: auto;
        }

        .tab {
            padding: 12px 24px;
            border: 1px solid var(--border);
            border-radius: 10px;
            background: var(--bg-secondary);
            color: var(--text-secondary);
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
        }

        .tab.active {
            background: var(--primary);
            color: white;
            border-color: var(--primary);
        }

        .tab:hover:not(.active) {
            background: var(--bg-card);
            color: var(--text-primary);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .card {
            background: var(--bg-card);
            border-radius: 15px;
            padding: 25px;
            border: 1px solid var(--border);
            margin-bottom: 20px;
        }

        .card h3 {
            color: var(--primary);
            margin-bottom: 20px;
            font-size: 1.3rem;
        }

        .settings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .settings-section {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 20px;
        }

        .settings-section h4 {
            color: var(--primary);
            margin-bottom: 15px;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-primary);
            font-size: 0.9rem;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border);
            border-radius: 8px;
            background: var(--bg-primary);
            color: var(--text-primary);
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
        }

        .form-control[type="checkbox"] {
            width: auto;
            margin-right: 8px;
        }

        .checkbox-group {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 1rem;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--primary), var(--secondary));
            color: white;
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-warning {
            background: var(--warning);
            color: white;
        }

        .btn-info {
            background: var(--info);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn-group {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .alert {
            padding: 15px 20px;
            border-radius: 10px;
            margin: 15px 0;
            font-weight: 600;
            border: 1px solid;
        }

        .alert-success {
            background: rgba(16, 185, 129, 0.15);
            color: var(--success);
            border-color: var(--success);
        }

        .alert-error {
            background: rgba(239, 68, 68, 0.15);
            color: var(--danger);
            border-color: var(--danger);
        }

        .alert-info {
            background: rgba(59, 130, 246, 0.15);
            color: var(--info);
            border-color: var(--info);
        }

        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .metric-card {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 800;
            color: var(--primary);
            margin-bottom: 5px;
        }

        .metric-label {
            color: var(--text-secondary);
            font-size: 0.9rem;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

        .hidden {
            display: none;
        }

        .login-screen {
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
        }

        .login-card {
            background: var(--bg-card);
            border-radius: 20px;
            padding: 40px;
            border: 1px solid var(--border);
            width: 100%;
            max-width: 400px;
            text-align: center;
        }

        .two-column {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
        }

        .queue-item {
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
        }

        .queue-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .queue-position {
            background: var(--primary);
            color: white;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .status-badge {
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-waiting {
            background: rgba(251, 191, 36, 0.2);
            color: var(--warning);
        }

        .status-processing {
            background: rgba(59, 130, 246, 0.2);
            color: var(--info);
        }

        .status-ready {
            background: rgba(16, 185, 129, 0.2);
            color: var(--success);
        }

        .status-completed {
            background: rgba(107, 114, 128, 0.2);
            color: var(--text-secondary);
        }

        .config-actions {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid var(--border);
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .two-column {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .btn-group {
                flex-direction: column;
            }

            .header {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .settings-grid {
                grid-template-columns: 1fr;
            }

            .config-actions {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <!-- Login Screen -->
    <div id="loginScreen" class="login-screen">
        <div class="login-card">
            <div class="logo">QUP Admin</div>
            <div style="color: var(--text-secondary); margin-bottom: 30px;">
                Complete Queue Management System
            </div>

            <form id="loginForm">
                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" class="form-control" placeholder="Enter your email" autocomplete="username">
                </div>

                <div class="form-group">
                    <label for="password">Password:</label>
                    <input type="password" id="password" class="form-control" placeholder="Enter your password" autocomplete="current-password">
                </div>

                <button type="button" class="btn btn-primary" id="loginBtn" style="width: 100%;">
                    <span id="loginText">Sign In</span>
                    <div id="loginLoading" class="loading hidden"></div>
                </button>
            </form>

            <div id="loginError" class="alert alert-error hidden">
                Login failed. Please check your credentials.
            </div>

            <div style="margin-top: 20px; font-size: 0.9rem; color: var(--text-secondary);">
                Use your Supabase account to access the admin dashboard.<br>
                <button type="button" style="background: none; border: none; color: var(--primary); cursor: pointer; text-decoration: underline; margin-top: 10px;" id="showSignUpBtn">
                    Need an account? Sign up here
                </button>
            </div>
        </div>
    </div>

    <!-- Sign Up Screen -->
    <div id="signUpScreen" class="login-screen hidden">
        <div class="login-card">
            <div class="logo">QUP Admin</div>
            <div style="color: var(--text-secondary); margin-bottom: 30px;">
                Create Admin Account
            </div>

            <form id="signUpForm">
                <div class="form-group">
                    <label for="signUpEmail">Email:</label>
                    <input type="email" id="signUpEmail" class="form-control" placeholder="Enter your email" autocomplete="username">
                </div>

                <div class="form-group">
                    <label for="signUpPassword">Password:</label>
                    <input type="password" id="signUpPassword" class="form-control" placeholder="Choose a password (min 6 characters)" autocomplete="new-password">
                </div>

                <div class="form-group">
                    <label for="confirmPassword">Confirm Password:</label>
                    <input type="password" id="confirmPassword" class="form-control" placeholder="Confirm your password" autocomplete="new-password">
                </div>

                <button type="button" class="btn btn-primary" id="signUpBtn" style="width: 100%;">
                    <span id="signUpText">Create Account</span>
                    <div id="signUpLoading" class="loading hidden"></div>
                </button>
            </form>

            <div id="signUpError" class="alert alert-error hidden">
                Sign up failed. Please try again.
            </div>

            <div id="signUpSuccess" class="alert alert-success hidden">
                Account created! Please check your email to verify your account.
            </div>

            <div style="margin-top: 20px; font-size: 0.9rem; color: var(--text-secondary);">
                Already have an account?<br>
                <button type="button" style="background: none; border: none; color: var(--primary); cursor: pointer; text-decoration: underline; margin-top: 10px;" id="backToLoginBtn">
                    Back to Sign In
                </button>
            </div>
        </div>
    </div>

    <!-- Main Dashboard -->
    <div id="dashboard" class="container hidden">
        <!-- Header -->
        <div class="header">
            <div>
                <div class="logo">QUP Admin Dashboard</div>
                <div style="color: var(--text-secondary); margin-top: 5px;">Enterprise Queue Management</div>
            </div>
            <div class="user-info">
                <div class="connection-status" id="connectionStatus">
                    <div class="connection-dot"></div>
                    <span>Connecting...</span>
                </div>
                <span id="adminUser" style="color: var(--text-secondary);"></span>
                <button class="btn btn-danger" id="logoutBtn">Logout</button>
            </div>
        </div>

        <!-- Metrics Overview -->
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value" id="totalOrders">-</div>
                <div class="metric-label">Total Orders</div>
            </div>
            <div class="metric-card">
                <div class="metric-value" id="activeOrders">-</div>
                <div class="metric-label">Active Orders</div>
            </div>
            <div class="metric-card">
                <div class="metric-value" id="poolTime">-</div>
                <div class="metric-label">Pool Time (s)</div>
            </div>
            <div class="metric-card">
                <div class="metric-value" id="connectedClients">-</div>
                <div class="metric-label">Connected Clients</div>
            </div>
        </div>

        <!-- Tabs -->
        <div class="tabs">
            <div class="tab active" data-tab="queue">Queue Management</div>
            <div class="tab" data-tab="settings">Settings</div>
            <div class="tab" data-tab="orders">Order Operations</div>
            <div class="tab" data-tab="system">System Status</div>
            <div class="tab" data-tab="monitor">Live Monitor</div>
            <div class="tab" data-tab="logs">Audit Logs</div>
        </div>

        <!-- Queue Management Tab -->
        <div id="queueTab" class="tab-content active">
            <div class="card">
                <h3>Live Queue</h3>
                <div class="btn-group">
                    <button class="btn btn-primary" id="refreshQueueBtn">Refresh</button>
                    <button class="btn btn-success" id="exportQueueBtn">Export</button>
                    <button class="btn btn-warning" id="clearCompletedBtn">Clear Completed</button>
                </div>
                <div id="queueContainer">
                    <div id="queueLoading" class="alert alert-info">Loading queue...</div>
                </div>
            </div>
        </div>

        <!-- Settings Tab -->
        <div id="settingsTab" class="tab-content">
            <div class="card">
                <h3>System Configuration</h3>
                <div class="settings-grid">
                    <!-- Queue Configuration -->
                    <div class="settings-section">
                        <h4>Queue Settings</h4>
                        <div class="form-group">
                            <label for="queueName">Queue Name:</label>
                            <input type="text" id="queueName" class="form-control" value="Production Queue">
                        </div>
                        <div class="form-group">
                            <label for="queueMode">Queue Mode:</label>
                            <select id="queueMode" class="form-control">
                                <option value="fifo">FIFO (First In, First Out)</option>
                                <option value="super_qup">Super QUP (Priority + Pool Time)</option>
                                <option value="negotiation">Negotiation (Payment System)</option>
                                <option value="chaos">Chaos (Random)</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="maxQueueSize">Max Queue Size:</label>
                            <input type="number" id="maxQueueSize" class="form-control" value="1000">
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableQueue" class="form-control" checked>
                            <label for="enableQueue">Enable Queue Processing</label>
                        </div>
                    </div>

                    <!-- Time Management -->
                    <div class="settings-section">
                        <h4>Time Management</h4>
                        <div class="form-group">
                            <label for="defaultTimeEstimate">Default Time Estimate (seconds):</label>
                            <input type="number" id="defaultTimeEstimate" class="form-control" value="120">
                        </div>
                        <div class="form-group">
                            <label for="poolTimeBuffer">Pool Time Buffer (seconds):</label>
                            <input type="number" id="poolTimeBuffer" class="form-control" value="30">
                        </div>
                        <div class="form-group">
                            <label for="timeDecayRate">Time Decay Rate:</label>
                            <input type="number" id="timeDecayRate" class="form-control" step="0.1" value="0.1">
                        </div>
                        <div class="form-group">
                            <label for="maxPoolTime">Max Pool Time (seconds):</label>
                            <input type="number" id="maxPoolTime" class="form-control" value="300">
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableTimeManagement" class="form-control" checked>
                            <label for="enableTimeManagement">Enable Time Management</label>
                        </div>
                    </div>

                    <!-- Priority Settings -->
                    <div class="settings-section">
                        <h4>Priority Settings</h4>
                        <div class="form-group">
                            <label for="basePriority">Base Priority:</label>
                            <input type="number" id="basePriority" class="form-control" value="500">
                        </div>
                        <div class="form-group">
                            <label for="priorityIncrement">Priority Increment:</label>
                            <input type="number" id="priorityIncrement" class="form-control" value="50">
                        </div>
                        <div class="form-group">
                            <label for="maxPriority">Max Priority:</label>
                            <input type="number" id="maxPriority" class="form-control" value="1000">
                        </div>
                        <div class="form-group">
                            <label for="minPriority">Min Priority:</label>
                            <input type="number" id="minPriority" class="form-control" value="100">
                        </div>
                    </div>

                    <!-- Super QUP Settings -->
                    <div class="settings-section">
                        <h4>Super QUP Settings</h4>
                        <div class="form-group">
                            <label for="superQupCost">Super QUP Cost:</label>
                            <input type="number" id="superQupCost" class="form-control" step="0.01" value="1.50">
                        </div>
                        <div class="form-group">
                            <label for="superQupTimeBonus">Time Bonus (seconds):</label>
                            <input type="number" id="superQupTimeBonus" class="form-control" value="60">
                        </div>
                        <div class="form-group">
                            <label for="superQupPriorityBonus">Priority Bonus:</label>
                            <input type="number" id="superQupPriorityBonus" class="form-control" value="200">
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableSuperQup" class="form-control" checked>
                            <label for="enableSuperQup">Enable Super QUP</label>
                        </div>
                    </div>

                    <!-- Notification Settings -->
                    <div class="settings-section">
                        <h4>Notification Settings</h4>
                        <div class="form-group">
                            <label for="notificationDelay">Notification Delay (ms):</label>
                            <input type="number" id="notificationDelay" class="form-control" value="1000">
                        </div>
                        <div class="form-group">
                            <label for="emailNotificationThreshold">Email Threshold (queue size):</label>
                            <input type="number" id="emailNotificationThreshold" class="form-control" value="50">
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableNotifications" class="form-control" checked>
                            <label for="enableNotifications">Enable Notifications</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableEmailNotifications" class="form-control">
                            <label for="enableEmailNotifications">Enable Email Notifications</label>
                        </div>
                    </div>

                    <!-- Debug Settings -->
                    <div class="settings-section">
                        <h4>Debug Settings</h4>
                        <div class="form-group">
                            <label for="logLevel">Log Level:</label>
                            <select id="logLevel" class="form-control">
                                <option value="error">Error</option>
                                <option value="warn">Warning</option>
                                <option value="info" selected>Info</option>
                                <option value="debug">Debug</option>
                                <option value="trace">Trace</option>
                            </select>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableDebugMode" class="form-control">
                            <label for="enableDebugMode">Enable Debug Mode</label>
                        </div>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableVerboseLogging" class="form-control">
                            <label for="enableVerboseLogging">Enable Verbose Logging</label>
                        </div>
                    </div>
                </div>

                <div class="config-actions">
                    <button class="btn btn-primary" id="saveAllSettingsBtn">Save All Settings</button>
                    <button class="btn btn-warning" id="loadSettingsBtn">Reload from Server</button>
                    <button class="btn btn-info" id="exportSettingsBtn">Export Settings</button>
                    <button class="btn btn-danger" id="resetAllSettingsBtn">Reset to Defaults</button>
                </div>
            </div>
        </div>

        <!-- Order Operations Tab -->
        <div id="ordersTab" class="tab-content">
            <div class="two-column">
                <div class="card">
                    <h3>Add Order</h3>
                    <form id="addOrderForm">
                        <div class="form-group">
                            <label for="orderId">Order ID:</label>
                            <input type="text" id="orderId" class="form-control" placeholder="auto-generated">
                        </div>
                        <div class="form-group">
                            <label for="orderDescription">Order Description:</label>
                            <textarea id="orderDescription" class="form-control" rows="3" placeholder="Large coffee with milk, no sugar"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="customerEmail">Customer Email:</label>
                            <input type="email" id="customerEmail" class="form-control" placeholder="customer@example.com">
                        </div>
                        <button type="button" class="btn btn-primary" id="addOrderBtn">Add Order</button>
                    </form>
                </div>

                <div class="card">
                    <h3>Order Actions</h3>
                    <div class="form-group">
                        <label for="actionOrderId">Order ID:</label>
                        <input type="text" id="actionOrderId" class="form-control" placeholder="Enter order ID">
                    </div>
                    <div class="btn-group" style="flex-direction: column;">
                        <button class="btn btn-success" id="finalizeOrderBtn">Finalize Order</button>
                        <button class="btn btn-primary" id="completeOrderBtn">Complete Order</button>
                        <button class="btn btn-danger" id="cancelOrderBtn">Cancel Order</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- System Status Tab -->
        <div id="systemTab" class="tab-content">
            <div class="card">
                <h3>System Health</h3>
                <div id="systemHealth">Loading system status...</div>
            </div>
        </div>

        <!-- Live Monitor Tab -->
        <div id="monitorTab" class="tab-content">
            <div class="card">
                <h3>Live System Variables</h3>
                <div class="btn-group">
                    <button class="btn btn-primary" id="refreshMonitorBtn">Refresh All Data</button>
                    <button class="btn btn-success" id="exportMonitorBtn">Export Variables</button>
                    <button class="btn btn-info" id="toggleAutoRefreshBtn">
                        <span id="autoRefreshText">Stop Auto-Refresh</span>
                    </button>
                </div>
                <div id="monitorContent">Loading all system variables...</div>
            </div>
        </div>

        <!-- Audit Logs Tab -->
        <div id="logsTab" class="tab-content">
            <div class="card">
                <h3>Audit Logs</h3>
                <div id="logsContainer">
                    <div class="alert alert-info">Click refresh to load audit trail</div>
                </div>
            </div>
        </div>

        <!-- Alerts Container -->
        <div id="alertsContainer"></div>
    </div>

    <script>
        // Global state variables
        let adminKey = null;
        let socket = null;
        let currentConfig = {};
        let refreshInterval = null;
        let monitorInterval = null;
        let autoRefreshEnabled = true;
        let supabase = null;
        let currentUser = null;
        let systemData = {};

        // Configuration constants
        const SUPABASE_URL = 'https://eorhgophbjjbiguvkygo.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVvcmhnb3BoYmpqYmlndXZreWdvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4MjMyMjUsImV4cCI6MjA2NDM5OTIyNX0.fV_6TFXfjDVusTeknF_LAGjxw7BfTZtoQ0helbm5mwo';
        const API_BASE = 'https://qupcore-supercode-692478335867.us-central1.run.app';

        // Default configuration values
        const DEFAULT_CONFIG = {
            queueName: 'Production Queue',
            queueMode: 'super_qup',
            maxQueueSize: 1000,
            enableQueue: true,
            defaultTimeEstimate: 120,
            poolTimeBuffer: 30,
            timeDecayRate: 0.1,
            maxPoolTime: 300,
            enableTimeManagement: true,
            basePriority: 500,
            priorityIncrement: 50,
            maxPriority: 1000,
            minPriority: 100,
            superQupCost: 1.50,
            superQupTimeBonus: 60,
            superQupPriorityBonus: 200,
            enableSuperQup: true,
            notificationDelay: 1000,
            emailNotificationThreshold: 50,
            enableNotifications: true,
            enableEmailNotifications: false,
            logLevel: 'info',
            enableDebugMode: false,
            enableVerboseLogging: false
        };

        // Initialize application
        function init() {
            try {
                supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                console.log('Supabase client initialized');
            } catch (error) {
                console.error('Supabase initialization failed:', error);
                showAlert('Failed to initialize authentication system', 'error');
                return;
            }

            setupEventListeners();
            loadDefaultSettings();
            checkExistingSession();
            console.log('QUP Admin Dashboard initialized');
        }

        function loadDefaultSettings() {
            Object.keys(DEFAULT_CONFIG).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.type === 'checkbox') {
                        element.checked = DEFAULT_CONFIG[key];
                    } else {
                        element.value = DEFAULT_CONFIG[key];
                    }
                }
            });
        }

        function setupEventListeners() {
            document.getElementById('loginBtn').addEventListener('click', login);
            document.getElementById('showSignUpBtn').addEventListener('click', showSignUp);
            document.getElementById('signUpBtn').addEventListener('click', signUp);
            document.getElementById('backToLoginBtn').addEventListener('click', showLogin);
            document.getElementById('logoutBtn').addEventListener('click', logout);

            document.querySelectorAll('.tab').forEach(tab => {
                tab.addEventListener('click', (e) => {
                    const tabName = e.target.getAttribute('data-tab');
                    showTab(tabName);
                });
            });

            document.getElementById('refreshQueueBtn').addEventListener('click', refreshQueue);
            document.getElementById('exportQueueBtn').addEventListener('click', exportQueue);
            document.getElementById('clearCompletedBtn').addEventListener('click', clearCompleted);

            document.getElementById('saveAllSettingsBtn').addEventListener('click', saveAllSettings);
            document.getElementById('loadSettingsBtn').addEventListener('click', loadSettings);
            document.getElementById('exportSettingsBtn').addEventListener('click', exportSettings);
            document.getElementById('resetAllSettingsBtn').addEventListener('click', resetAllSettings);

            document.getElementById('addOrderBtn').addEventListener('click', addOrder);
            document.getElementById('finalizeOrderBtn').addEventListener('click', finalizeOrder);
            document.getElementById('completeOrderBtn').addEventListener('click', completeOrder);
            document.getElementById('cancelOrderBtn').addEventListener('click', cancelOrder);

            document.getElementById('refreshMonitorBtn').addEventListener('click', loadMonitor);
            document.getElementById('exportMonitorBtn').addEventListener('click', exportMonitorData);
            document.getElementById('toggleAutoRefreshBtn').addEventListener('click', toggleAutoRefresh);

            document.getElementById('email').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') document.getElementById('password').focus();
            });
            document.getElementById('password').addEventListener('keypress', (e) => {
                if (e.key === 'Enter') login();
            });
        }

        async function checkExistingSession() {
            try {
                const { data: { user } } = await supabase.auth.getUser();
                if (user) {
                    console.log('Found existing session:', user.email);
                    currentUser = user;
                    document.getElementById('adminUser').textContent = `Admin: ${user.email}`;
                    await getAdminKeyAndShowDashboard();
                } else {
                    showLogin();
                }
            } catch (error) {
                console.error('Failed to check existing session:', error);
                showLogin();
            }
        }

        async function login() {
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value.trim();

            if (!email || !password) {
                showAlert('Please enter both email and password', 'error');
                return;
            }

            setLoading('login', true);
            document.getElementById('loginError').classList.add('hidden');

            try {
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: email,
                    password: password
                });

                if (error) throw error;

                console.log('Login successful for:', email);
                currentUser = data.user;
                document.getElementById('adminUser').textContent = `Admin: ${email}`;

                await getAdminKeyAndShowDashboard();
                showAlert('Login successful!', 'success');

            } catch (error) {
                console.error('Login failed:', error);
                document.getElementById('loginError').classList.remove('hidden');
                showAlert('Login failed: ' + error.message, 'error');
            } finally {
                setLoading('login', false);
            }
        }

        async function signUp() {
            const email = document.getElementById('signUpEmail').value.trim();
            const password = document.getElementById('signUpPassword').value.trim();
            const confirmPassword = document.getElementById('confirmPassword').value.trim();

            if (!email || !password || !confirmPassword) {
                showAlert('Please fill in all fields', 'error');
                return;
            }

            if (password !== confirmPassword) {
                showAlert('Passwords do not match', 'error');
                return;
            }

            if (password.length < 6) {
                showAlert('Password must be at least 6 characters', 'error');
                return;
            }

            setLoading('signUp', true);

            try {
                const { data, error } = await supabase.auth.signUp({
                    email: email,
                    password: password
                });

                if (error) throw error;

                console.log('Sign up successful for:', email);
                document.getElementById('signUpSuccess').classList.remove('hidden');
                showAlert('Account created! Please check your email to verify.', 'success');

                document.getElementById('signUpEmail').value = '';
                document.getElementById('signUpPassword').value = '';
                document.getElementById('confirmPassword').value = '';

                setTimeout(() => showLogin(), 3000);

            } catch (error) {
                console.error('Sign up failed:', error);
                document.getElementById('signUpError').classList.remove('hidden');
                showAlert('Sign up failed: ' + error.message, 'error');
            } finally {
                setLoading('signUp', false);
            }
        }

        async function logout() {
            try {
                await supabase.auth.signOut();
                console.log('Logout successful');
            } catch (error) {
                console.error('Logout error:', error);
            }

            adminKey = null;
            currentUser = null;
            if (socket) {
                socket.disconnect();
                socket = null;
            }
            if (refreshInterval) {
                clearInterval(refreshInterval);
                refreshInterval = null;
            }

            document.getElementById('dashboard').style.display = 'none';
            document.getElementById('loginScreen').style.display = 'flex';
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
            showAlert('Logged out successfully', 'info');
        }

        async function getAdminKeyAndShowDashboard() {
            try {
                const response = await fetch(`${API_BASE}/api/auth/admin/login`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        username: 'admin',
                        password: 'admin123'
                    })
                });

                const data = await response.json();

                if (response.ok && data.admin_key) {
                    adminKey = data.admin_key;
                    console.log('Admin key obtained');
                    showDashboard();
                } else {
                    throw new Error(data.error || 'Failed to get admin key');
                }
            } catch (error) {
                console.error('Failed to get admin key:', error);
                showAlert('Failed to get API access', 'warning');
                showDashboard();
            }
        }

        function showLogin() {
            document.getElementById('signUpScreen').style.display = 'none';
            document.getElementById('loginScreen').style.display = 'flex';
            document.getElementById('dashboard').style.display = 'none';
        }

        function showSignUp() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('signUpScreen').style.display = 'flex';
            document.getElementById('dashboard').style.display = 'none';
        }

        function showDashboard() {
            document.getElementById('loginScreen').style.display = 'none';
            document.getElementById('signUpScreen').style.display = 'none';
            document.getElementById('dashboard').classList.remove('hidden');
            connectWebSocket();
            loadInitialData();
            startPeriodicRefresh();
        }

        function showTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');

            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName + 'Tab').classList.add('active');

            switch (tabName) {
                case 'queue':
                    refreshQueue();
                    break;
                case 'settings':
                    loadSettings();
                    break;
                case 'system':
                    loadSystemStatus();
                    break;
                case 'monitor':
                    loadMonitor();
                    break;
            }
        }

        function getCurrentSettings() {
            const settings = {};
            Object.keys(DEFAULT_CONFIG).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.type === 'checkbox') {
                        settings[key] = element.checked;
                    } else if (element.type === 'number') {
                        settings[key] = parseFloat(element.value) || 0;
                    } else {
                        settings[key] = element.value;
                    }
                }
            });
            return settings;
        }

        function applySettingsToForm(settings) {
            Object.keys(settings).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.type === 'checkbox') {
                        element.checked = settings[key];
                    } else {
                        element.value = settings[key];
                    }
                }
            });
        }

        async function saveAllSettings() {
            const settings = getCurrentSettings();

            try {
                const response = await apiCall('/api/v1/config/update', {
                    method: 'POST',
                    body: JSON.stringify(settings)
                });

                if (response.ok) {
                    currentConfig = settings;
                    showAlert('All settings saved successfully!', 'success');
                } else {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to save settings');
                }
            } catch (error) {
                console.error('Failed to save settings:', error);
                showAlert('Failed to save settings: ' + error.message, 'error');
            }
        }

        async function loadSettings() {
            try {
                const response = await apiCall('/api/v1/queue/list?admin=true');
                const data = await response.json();

                if (response.ok && data.config) {
                    currentConfig = { ...DEFAULT_CONFIG, ...data.config };
                    applySettingsToForm(currentConfig);
                    showAlert('Settings loaded from server', 'success');
                } else {
                    applySettingsToForm(DEFAULT_CONFIG);
                    showAlert('Using default settings (server config not available)', 'info');
                }
            } catch (error) {
                console.error('Failed to load settings:', error);
                applySettingsToForm(DEFAULT_CONFIG);
                showAlert('Failed to load settings, using defaults', 'error');
            }
        }

        function exportSettings() {
            const settings = getCurrentSettings();
            const blob = new Blob([JSON.stringify(settings, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `qup-settings-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            showAlert('Settings exported successfully', 'success');
        }

        function resetAllSettings() {
            if (confirm('Reset all settings to defaults? This cannot be undone.')) {
                applySettingsToForm(DEFAULT_CONFIG);
                showAlert('All settings reset to defaults', 'info');
            }
        }

        function connectWebSocket() {
            if (socket) return;

            socket = io(API_BASE, {
                transports: ['websocket', 'polling'],
                timeout: 20000
            });

            socket.on('connect', () => {
                updateConnectionStatus(true);
                console.log('WebSocket connected');
            });

            socket.on('disconnect', () => {
                updateConnectionStatus(false);
            });

            socket.on('queue_update', () => {
                refreshQueue();
            });
        }

        function updateConnectionStatus(connected) {
            const status = document.getElementById('connectionStatus');
            if (connected) {
                status.className = 'connection-status connected';
                status.innerHTML = '<div class="connection-dot"></div><span>Connected</span>';
            } else {
                status.className = 'connection-status disconnected';
                status.innerHTML = '<div class="connection-dot"></div><span>Disconnected</span>';
            }
        }

        async function loadInitialData() {
            await Promise.all([
                refreshQueue(),
                loadSettings(),
                updateMetrics()
            ]);
        }

        function startPeriodicRefresh() {
            if (refreshInterval) clearInterval(refreshInterval);
            refreshInterval = setInterval(() => {
                updateMetrics();
                const activeTab = document.querySelector('.tab-content.active');
                if (activeTab && activeTab.id === 'queueTab') {
                    refreshQueue();
                }
                if (activeTab && activeTab.id === 'monitorTab' && autoRefreshEnabled) {
                    loadMonitor();
                }
            }, 5000);
        }

        function toggleAutoRefresh() {
            autoRefreshEnabled = !autoRefreshEnabled;
            const text = document.getElementById('autoRefreshText');

            if (autoRefreshEnabled) {
                text.textContent = 'Stop Auto-Refresh';
                showAlert('Auto-refresh enabled', 'success');
            } else {
                text.textContent = 'Start Auto-Refresh';
                showAlert('Auto-refresh disabled', 'info');
            }
        }

        async function updateMetrics() {
            try {
                const response = await apiCall('/api/v1/queue/list?admin=true');
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('totalOrders').textContent = data.total_elements || 0;
                    document.getElementById('activeOrders').textContent = data.active_elements || 0;

                    if (data.time_management) {
                        document.getElementById('poolTime').textContent =
                            Math.round(data.time_management.available_pool_time || 0);
                    }
                }

                const wsResponse = await apiCall('/api/websocket/status');
                if (wsResponse.ok) {
                    const wsData = await wsResponse.json();
                    document.getElementById('connectedClients').textContent = wsData.connected_clients || 0;
                }
            } catch (error) {
                console.error('Failed to update metrics:', error);
            }
        }

        async function refreshQueue() {
            try {
                console.log('Refreshing queue...');
                const response = await apiCall('/api/v1/queue/list?admin=true');
                const data = await response.json();

                if (response.ok) {
                    renderQueue(data.queue || []);
                } else {
                    throw new Error(data.error || 'Failed to load queue');
                }
            } catch (error) {
                console.error('Failed to refresh queue:', error);
                document.getElementById('queueContainer').innerHTML =
                    '<div class="alert alert-error">Failed to load queue: ' + error.message + '</div>';
            }
        }

        function renderQueue(queue) {
            try {
                const container = document.getElementById('queueContainer');

                if (queue.length === 0) {
                    container.innerHTML = '<div class="alert alert-info">Queue is empty</div>';
                    return;
                }

                // FIXED: Proper HTML escaping function
                function escapeHtml(str) {
                    return String(str)
                        .replace(/&/g, '&amp;')
                        .replace(/</g, '&lt;')
                        .replace(/>/g, '&gt;')
                        .replace(/"/g, '&quot;')
                        .replace(/'/g, '&#39;');
                }

                let html = '';
                for (let i = 0; i < queue.length; i++) {
                    const order = queue[i];

                    let statusClass = 'status-waiting';
                    if (order.status === 'waiting') statusClass = 'status-waiting';
                    else if (order.status === 'processing') statusClass = 'status-processing';
                    else if (order.status === 'pickup_ready') statusClass = 'status-ready';
                    else if (order.status === 'completed') statusClass = 'status-completed';

                    const safeId = escapeHtml(order.id || '');
                    const safeStatus = escapeHtml(order.status || '');
                    let safePayload = '';

                    try {
                        if (order.payload && order.payload.order) {
                            safePayload = escapeHtml(order.payload.order);
                        } else if (order.payload) {
                            safePayload = escapeHtml(JSON.stringify(order.payload));
                        } else {
                            safePayload = 'No order data';
                        }
                    } catch (e) {
                        safePayload = 'Error parsing order data';
                    }

                    const safePriority = escapeHtml(String(order.priority || 0));

                    html += `
                        <div class="queue-item">
                            <div class="queue-item-header">
                                <div class="queue-position">${i + 1}</div>
                                <div class="status-badge ${statusClass}">${safeStatus}</div>
                            </div>
                            <div style="margin-bottom: 10px;">
                                <strong>ID:</strong> ${safeId}<br>
                                <strong>Order:</strong> ${safePayload}<br>
                                <strong>Priority:</strong> ${safePriority}
                            </div>
                            <div class="btn-group">
                                <button class="btn btn-success" onclick="quickAction('finalize', '${safeId}')" style="padding: 6px 12px; font-size: 0.8rem;">
                                    Finalize
                                </button>
                                <button class="btn btn-primary" onclick="quickAction('complete', '${safeId}')" style="padding: 6px 12px; font-size: 0.8rem;">
                                    Complete
                                </button>
                                <button class="btn btn-danger" onclick="quickAction('cancel', '${safeId}')" style="padding: 6px 12px; font-size: 0.8rem;">
                                    Cancel
                                </button>
                            </div>
                        </div>
                    `;
                }

                container.innerHTML = html;

            } catch (error) {
                console.error('Error rendering queue:', error);
                document.getElementById('queueContainer').innerHTML =
                    '<div class="alert alert-error">Failed to render queue: ' + error.message + '</div>';
            }
        }

        async function quickAction(action, orderId) {
            document.getElementById('actionOrderId').value = orderId;

            switch(action) {
                case 'finalize':
                    await finalizeOrder();
                    break;
                case 'complete':
                    await completeOrder();
                    break;
                case 'cancel':
                    await cancelOrder();
                    break;
            }
        }

        async function addOrder() {
            const orderId = document.getElementById('orderId').value ||
                          `admin-${Date.now()}-${Math.random().toString(36).substr(2, 5)}`;
            const description = document.getElementById('orderDescription').value.trim();
            const email = document.getElementById('customerEmail').value.trim();

            if (!description) {
                showAlert('Order description is required', 'error');
                return;
            }

            try {
                const response = await apiCall('/api/v1/queue/add', {
                    method: 'POST',
                    body: JSON.stringify({
                        id: orderId,
                        payload: { order: description },
                        user_id: email || orderId,
                        priority: 500
                    })
                });

                if (response.ok) {
                    document.getElementById('orderId').value = '';
                    document.getElementById('orderDescription').value = '';
                    document.getElementById('customerEmail').value = '';

                    showAlert(`Order ${orderId} added successfully!`, 'success');
                    refreshQueue();
                } else {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to add order');
                }
            } catch (error) {
                console.error('Failed to add order:', error);
                showAlert('Failed to add order: ' + error.message, 'error');
            }
        }

        async function finalizeOrder() {
            const orderId = document.getElementById('actionOrderId').value.trim();
            if (!orderId) {
                showAlert('Please enter an Order ID', 'error');
                return;
            }

            try {
                const response = await apiCall('/api/v1/queue/finalize', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId })
                });

                if (response.ok) {
                    showAlert(`Order ${orderId} finalized!`, 'success');
                    refreshQueue();
                } else {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to finalize order');
                }
            } catch (error) {
                showAlert('Failed to finalize order: ' + error.message, 'error');
            }
        }

        async function completeOrder() {
            const orderId = document.getElementById('actionOrderId').value.trim();
            if (!orderId) {
                showAlert('Please enter an Order ID', 'error');
                return;
            }

            try {
                const response = await apiCall('/api/v1/queue/complete', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId })
                });

                if (response.ok) {
                    showAlert(`Order ${orderId} completed!`, 'success');
                    refreshQueue();
                } else {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to complete order');
                }
            } catch (error) {
                showAlert('Failed to complete order: ' + error.message, 'error');
            }
        }

        async function cancelOrder() {
            const orderId = document.getElementById('actionOrderId').value.trim();
            if (!orderId) {
                showAlert('Please enter an Order ID', 'error');
                return;
            }

            if (!confirm(`Cancel order ${orderId}?`)) return;

            try {
                const response = await apiCall('/api/v1/queue/cancel', {
                    method: 'POST',
                    body: JSON.stringify({ id: orderId })
                });

                if (response.ok) {
                    showAlert(`Order ${orderId} cancelled!`, 'success');
                    refreshQueue();
                } else {
                    const error = await response.json();
                    throw new Error(error.error || 'Failed to cancel order');
                }
            } catch (error) {
                showAlert('Failed to cancel order: ' + error.message, 'error');
            }
        }

        async function loadSystemStatus() {
            try {
                const response = await fetch(`${API_BASE}/health`);
                if (response.ok) {
                    const data = await response.json();
                    document.getElementById('systemHealth').innerHTML = `
                        <div class="alert alert-${data.status === 'healthy' ? 'success' : 'error'}">
                            <strong>Status:</strong> ${data.status}<br>
                            <strong>Service:</strong> ${data.service}<br>
                            <strong>Version:</strong> ${data.version || 'Unknown'}
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Failed to load system status:', error);
                document.getElementById('systemHealth').innerHTML =
                    '<div class="alert alert-error">Failed to load system status</div>';
            }
        }

        async function loadMonitor() {
            document.getElementById('monitorContent').innerHTML = '<div class="alert alert-info">Loading all system variables...</div>';

            try {
                console.log('Starting monitor data load...');

                const promises = [
                    fetch(`${API_BASE}/health`).catch(e => ({ ok: false, error: e.message })),
                    apiCall('/api/v1/queue/list?admin=true').catch(e => ({ ok: false, error: e.message })),
                    apiCall('/api/websocket/status').catch(e => ({ ok: false, error: e.message })),
                    fetch(`${API_BASE}/api/client/config`).catch(e => ({ ok: false, error: e.message }))
                ];

                const [healthResponse, queueResponse, wsResponse, configResponse] = await Promise.all(promises);

                const healthData = healthResponse.ok ? await healthResponse.json() : { error: healthResponse.error };
                const queueData = queueResponse.ok ? await queueResponse.json() : { error: queueResponse.error };
                const wsData = wsResponse.ok ? await wsResponse.json() : { error: wsResponse.error };
                const configData = configResponse.ok ? await configResponse.json() : { error: configResponse.error };

                systemData = {
                    timestamp: new Date().toISOString(),
                    health: healthData,
                    queue: queueData,
                    websocket: wsData,
                    config: configData,
                    client_state: {
                        admin_key_available: !!adminKey,
                        supabase_user: currentUser && currentUser.email ? currentUser.email : null,
                        auto_refresh: autoRefreshEnabled,
                        socket_connected: socket && socket.connected ? socket.connected : false
                    },
                    current_settings: getCurrentSettings()
                };

                console.log('systemData loaded:', systemData);
                renderMonitorDisplay(systemData);

            } catch (error) {
                console.error('Failed to load monitor data:', error);
                document.getElementById('monitorContent').innerHTML =
                    '<div class="alert alert-error">Failed to load monitor data: ' + error.message + '</div>';
            }
        }

        function renderMonitorDisplay(data) {
            try {
                let html = '';
                html += '<div style="margin-bottom: 20px; text-align: center; color: var(--text-secondary);">';
                html += '<span style="color: var(--success);">●</span> Live System Monitor - Last Updated: ';
                html += new Date().toLocaleTimeString();
                html += '</div>';

                htm+= '<div style="background: var(--bg-secondary); border: 1px solid var(--border); border-radius: 12px; padding: 20px; max-height: 500px; overflow-y: auto;">';
                html += '<pre style="color: var(--text-secondary); font-size: 0.9rem; line-height: 1.4; white-space: pre-wrap; margin: 0; font-family: \'Courier New\', Monaco, monospace;">';

                // FIXED: Proper HTML escaping for JSON display
                const jsonString = JSON.stringify(data, null, 2)
                    .replace(/&/g, '&amp;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/"/g, '&quot;');
                html += jsonString;

                html += '</pre>';
                html += '</div>';

                document.getElementById('monitorContent').innerHTML = html;

            } catch (error) {
                console.error('Error rendering monitor display:', error);
                document.getElementById('monitorContent').innerHTML =
                    '<div class="alert alert-error">Failed to render monitor data: ' + error.message + '</div>';
            }
        }

        function exportMonitorData() {
            if (!systemData || !Object.keys(systemData).length) {
                showAlert('No monitor data to export. Please refresh first.', 'error');
                return;
            }

            const blob = new Blob([JSON.stringify(systemData, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `qup-system-variables-${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
            showAlert('System variables exported successfully', 'success');
        }

        function exportQueue() {
            apiCall('/api/v1/queue/list?admin=true')
                .then(response => response.json())
                .then(data => {
                    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = `qup-queue-${new Date().toISOString().split('T')[0]}.json`;
                    a.click();
                    URL.revokeObjectURL(url);
                    showAlert('Queue exported successfully', 'success');
                })
                .catch(error => {
                    showAlert('Failed to export queue: ' + error.message, 'error');
                });
        }

        function clearCompleted() {
            if (confirm('Clear all completed orders?')) {
                showAlert('Clear completed functionality coming soon...', 'info');
            }
        }

        async function apiCall(endpoint, options) {
            options = options || {};

            if (!adminKey) {
                throw new Error('Admin key not available');
            }

            const defaultOptions = {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Admin-Key': adminKey
                }
            };

            const mergedOptions = { ...defaultOptions, ...options };
            if (options.headers) {
                mergedOptions.headers = { ...defaultOptions.headers, ...options.headers };
            }

            return fetch(API_BASE + endpoint, mergedOptions);
        }

        function showAlert(message, type) {
            type = type || 'info';
            const container = document.getElementById('alertsContainer');
            const alert = document.createElement('div');
            alert.className = 'alert alert-' + type;
            alert.textContent = message;

            container.appendChild(alert);

            setTimeout(() => {
                if (alert.parentNode) {
                    alert.remove();
                }
            }, 5000);
        }

        function setLoading(type, loading) {
            const text = document.getElementById(type + 'Text');
            const spinner = document.getElementById(type + 'Loading');

            if (loading) {
                text.style.display = 'none';
                spinner.classList.remove('hidden');
            } else {
                text.style.display = 'inline';
                spinner.classList.add('hidden');
            }
        }

        // Global function for queue actions
        window.quickAction = quickAction;

        // Initialize when DOM is ready
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
